
INOCHI_TASK01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dec  08004dec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004dec  08004dec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dec  08004dec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dec  08004dec  00014dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  20000010  08004e04  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  08004e04  00021028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014804  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b7b  00000000  00000000  00034844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00038558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a5c  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed50  00000000  00000000  00061ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd3f7  00000000  00000000  00070d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016e13b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  0016e1b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ce8 	.word	0x08004ce8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004ce8 	.word	0x08004ce8

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
//static void MX_LCD_Init(void);
void Task01_init(void const * argument);
void Task02_init(void const * argument);

int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b08e      	sub	sp, #56	; 0x38
 8000208:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f001 f865 	bl	80012d8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f833 	bl	8000278 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f89d 	bl	8000350 <MX_GPIO_Init>

  BSP_LCD_GLASS_Init();
 8000216:	f000 fafd 	bl	8000814 <BSP_LCD_GLASS_Init>

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, Task01_init, osPriorityNormal, 0, 128);
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0x64>)
 800021c:	f107 041c 	add.w	r4, r7, #28
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800022e:	f107 031c 	add.w	r3, r7, #28
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f003 fb2a 	bl	800388e <osThreadCreate>
 800023a:	4602      	mov	r2, r0
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0x68>)
 800023e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Task02_init, osPriorityNormal, 0, 128);
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x6c>)
 8000242:	463c      	mov	r4, r7
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000252:	463b      	mov	r3, r7
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fb19 	bl	800388e <osThreadCreate>
 800025c:	4602      	mov	r2, r0
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <main+0x70>)
 8000260:	601a      	str	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 8000262:	f003 fb0d 	bl	8003880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000266:	e7fe      	b.n	8000266 <main+0x62>
 8000268:	08004d08 	.word	0x08004d08
 800026c:	20000fc4 	.word	0x20000fc4
 8000270:	08004d2c 	.word	0x08004d2c
 8000274:	20000f84 	.word	0x20000f84

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0b8      	sub	sp, #224	; 0xe0
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 fd26 	bl	8004cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	463b      	mov	r3, r7
 800029e:	2288      	movs	r2, #136	; 0x88
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 fd18 	bl	8004cd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80002a8:	2318      	movs	r3, #24
 80002aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002c0:	2360      	movs	r3, #96	; 0x60
 80002c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fd35 	bl	8001d40 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002dc:	f000 f918 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f901 	bl	800250c <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000310:	f000 f8fe 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000318:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800031a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800031e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fb11 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000330:	f000 f8ee 	bl	8000510 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000334:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000338:	f001 fcac 	bl	8001c94 <HAL_PWREx_ControlVoltageScaling>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000342:	f000 f8e5 	bl	8000510 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	37e0      	adds	r7, #224	; 0xe0
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	; 0x28
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_GPIO_Init+0x98>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <MX_GPIO_Init+0x98>)
 800036c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_GPIO_Init+0x98>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037a:	613b      	str	r3, [r7, #16]
 800037c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_GPIO_Init+0x98>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	4a19      	ldr	r2, [pc, #100]	; (80003e8 <MX_GPIO_Init+0x98>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_GPIO_Init+0x98>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_GPIO_Init+0x98>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <MX_GPIO_Init+0x98>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_GPIO_Init+0x98>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_GPIO_Init+0x98>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <MX_GPIO_Init+0x98>)
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_GPIO_Init+0x98>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0302 	and.w	r3, r3, #2
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f001 f8c0 	bl	8001560 <HAL_GPIO_Init>

}
 80003e0:	bf00      	nop
 80003e2:	3728      	adds	r7, #40	; 0x28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000

080003ec <Task01_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01_init */
void Task01_init(void const * argument)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 uint8_t arr[10]= {"0123456789"};
 80003f4:	4a18      	ldr	r2, [pc, #96]	; (8000458 <Task01_init+0x6c>)
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80003fc:	c303      	stmia	r3!, {r0, r1}
 80003fe:	801a      	strh	r2, [r3, #0]

  for(;;)
  {
	  for(int y=0; y<6;y++)
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
 8000404:	e024      	b.n	8000450 <Task01_init+0x64>
	  	  {
	         for(int x=0;x<10;x++)
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
 800040a:	e01b      	b.n	8000444 <Task01_init+0x58>
	         {
	  	        BSP_LCD_GLASS_DisplayChar(&arr[y], POINT_OFF, DOUBLEPOINT_OFF,LCD_DIGIT_POSITION_1);
 800040c:	f107 020c 	add.w	r2, r7, #12
 8000410:	69fb      	ldr	r3, [r7, #28]
 8000412:	18d0      	adds	r0, r2, r3
 8000414:	2300      	movs	r3, #0
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	f000 fa35 	bl	8000888 <BSP_LCD_GLASS_DisplayChar>
	  	        BSP_LCD_GLASS_DisplayChar(&arr[x], POINT_OFF, DOUBLEPOINT_OFF,LCD_DIGIT_POSITION_2);
 800041e:	f107 020c 	add.w	r2, r7, #12
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	18d0      	adds	r0, r2, r3
 8000426:	2301      	movs	r3, #1
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	f000 fa2c 	bl	8000888 <BSP_LCD_GLASS_DisplayChar>
                HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <Task01_init+0x70>)
 8000432:	f001 fbc6 	bl	8001bc2 <HAL_LCD_UpdateDisplayRequest>

                osDelay(1000);
 8000436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800043a:	f003 fa74 	bl	8003926 <osDelay>
	         for(int x=0;x<10;x++)
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	3301      	adds	r3, #1
 8000442:	61bb      	str	r3, [r7, #24]
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	2b09      	cmp	r3, #9
 8000448:	dde0      	ble.n	800040c <Task01_init+0x20>
	  for(int y=0; y<6;y++)
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3301      	adds	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	2b05      	cmp	r3, #5
 8000454:	ddd7      	ble.n	8000406 <Task01_init+0x1a>
 8000456:	e7d3      	b.n	8000400 <Task01_init+0x14>
 8000458:	08004d48 	.word	0x08004d48
 800045c:	20000f88 	.word	0x20000f88

08000460 <Task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
	int x=0;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
	int y=0;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
	uint8_t arr[10]= {"0123456789"};
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <Task02_init+0x84>)
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	ca07      	ldmia	r2, {r0, r1, r2}
 8000478:	c303      	stmia	r3!, {r0, r1}
 800047a:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)>0)
 800047c:	2101      	movs	r1, #1
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f001 fa15 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d011      	beq.n	80004b0 <Task02_init+0x50>
	{
		if(x<9)
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	2b08      	cmp	r3, #8
 8000490:	dc03      	bgt.n	800049a <Task02_init+0x3a>
		{
			x++;
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	3301      	adds	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
 8000498:	e00a      	b.n	80004b0 <Task02_init+0x50>
		}
		else
		{
			x=0;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
			if(y<5)
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	dc03      	bgt.n	80004ac <Task02_init+0x4c>
			{
				y++;
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	3301      	adds	r3, #1
 80004a8:	61bb      	str	r3, [r7, #24]
 80004aa:	e001      	b.n	80004b0 <Task02_init+0x50>
			}
			else
			{
				y=0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	 BSP_LCD_GLASS_DisplayChar(&arr[x], POINT_OFF, DOUBLEPOINT_OFF,LCD_DIGIT_POSITION_5);
 80004b0:	f107 020c 	add.w	r2, r7, #12
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	18d0      	adds	r0, r2, r3
 80004b8:	2304      	movs	r3, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	f000 f9e3 	bl	8000888 <BSP_LCD_GLASS_DisplayChar>
	 BSP_LCD_GLASS_DisplayChar(&arr[y], POINT_OFF, DOUBLEPOINT_OFF,LCD_DIGIT_POSITION_4);
 80004c2:	f107 020c 	add.w	r2, r7, #12
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	18d0      	adds	r0, r2, r3
 80004ca:	2303      	movs	r3, #3
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	f000 f9da 	bl	8000888 <BSP_LCD_GLASS_DisplayChar>
     HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <Task02_init+0x88>)
 80004d6:	f001 fb74 	bl	8001bc2 <HAL_LCD_UpdateDisplayRequest>

     osDelay(200);
 80004da:	20c8      	movs	r0, #200	; 0xc8
 80004dc:	f003 fa23 	bl	8003926 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)>0)
 80004e0:	e7cc      	b.n	800047c <Task02_init+0x1c>
 80004e2:	bf00      	nop
 80004e4:	08004d48 	.word	0x08004d48
 80004e8:	20000f88 	.word	0x20000f88

080004ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d101      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fe:	f000 ff0b 	bl	8001318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40012c00 	.word	0x40012c00

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000516:	e7fe      	b.n	8000516 <Error_Handler+0x6>

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_MspInit+0x4c>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <HAL_MspInit+0x4c>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6613      	str	r3, [r2, #96]	; 0x60
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_MspInit+0x4c>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_MspInit+0x4c>)
 8000538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <HAL_MspInit+0x4c>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	6593      	str	r3, [r2, #88]	; 0x58
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_MspInit+0x4c>)
 8000544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	210f      	movs	r1, #15
 8000552:	f06f 0001 	mvn.w	r0, #1
 8000556:	f000 ffd9 	bl	800150c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 031c 	add.w	r3, r7, #28
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a34      	ldr	r2, [pc, #208]	; (8000658 <HAL_LCD_MspInit+0xf0>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d162      	bne.n	8000650 <HAL_LCD_MspInit+0xe8>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <HAL_LCD_MspInit+0xf4>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058e:	4a33      	ldr	r2, [pc, #204]	; (800065c <HAL_LCD_MspInit+0xf4>)
 8000590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000594:	6593      	str	r3, [r2, #88]	; 0x58
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <HAL_LCD_MspInit+0xf4>)
 8000598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a27      	ldr	r2, [pc, #156]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b25      	ldr	r3, [pc, #148]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a21      	ldr	r2, [pc, #132]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <HAL_LCD_MspInit+0xf4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB8     ------> LCD_SEG16
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ea:	233f      	movs	r3, #63	; 0x3f
 80005ec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80005fa:	230b      	movs	r3, #11
 80005fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4816      	ldr	r0, [pc, #88]	; (8000660 <HAL_LCD_MspInit+0xf8>)
 8000606:	f000 ffab 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800060a:	f248 73ce 	movw	r3, #34766	; 0x87ce
 800060e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800061c:	230b      	movs	r3, #11
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f000 ff99 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800062e:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8000632:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000640:	230b      	movs	r3, #11
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <HAL_LCD_MspInit+0xfc>)
 800064c:	f000 ff88 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3730      	adds	r7, #48	; 0x30
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40002400 	.word	0x40002400
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800
 8000664:	48000400 	.word	0x48000400

08000668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	2019      	movs	r0, #25
 800067e:	f000 ff45 	bl	800150c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000682:	2019      	movs	r0, #25
 8000684:	f000 ff5e 	bl	8001544 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <HAL_InitTick+0x9c>)
 800068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068c:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <HAL_InitTick+0x9c>)
 800068e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000692:	6613      	str	r3, [r2, #96]	; 0x60
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_InitTick+0x9c>)
 8000696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a0:	f107 0210 	add.w	r2, r7, #16
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f8bc 	bl	8002828 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006b0:	f002 f8a4 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 80006b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <HAL_InitTick+0xa0>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	0c9b      	lsrs	r3, r3, #18
 80006c0:	3b01      	subs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_InitTick+0xa4>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <HAL_InitTick+0xa8>)
 80006c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_InitTick+0xa4>)
 80006cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <HAL_InitTick+0xa4>)
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_InitTick+0xa4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <HAL_InitTick+0xa4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <HAL_InitTick+0xa4>)
 80006e6:	f002 fde1 	bl	80032ac <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d104      	bne.n	80006fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <HAL_InitTick+0xa4>)
 80006f2:	f002 fe3d 	bl	8003370 <HAL_TIM_Base_Start_IT>
 80006f6:	4603      	mov	r3, r0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	431bde83 	.word	0x431bde83
 800070c:	20000fc8 	.word	0x20000fc8
 8000710:	40012c00 	.word	0x40012c00

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000746:	f002 fe83 	bl	8003450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000fc8 	.word	0x20000fc8

08000754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <SystemInit+0x64>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <SystemInit+0x64>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0x68>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <SystemInit+0x68>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <SystemInit+0x68>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <SystemInit+0x68>)
 8000780:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000784:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SystemInit+0x68>)
 800078c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000790:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <SystemInit+0x68>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <SystemInit+0x68>)
 8000798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <SystemInit+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SystemInit+0x64>)
 80007a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007aa:	609a      	str	r2, [r3, #8]
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	40021000 	.word	0x40021000

080007c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c4:	f7ff ffc6 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
	ldr	r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007e4:	f842 3b04 	str.w	r3, [r2], #4

080007e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LoopForever+0x16>)
	cmp	r2, r3
 80007ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ee:	f004 fa4f 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f2:	f7ff fd07 	bl	8000204 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80007fc:	08004df4 	.word	0x08004df4
	ldr	r0, =_sdata
 8000800:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000804:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000808:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800080c:	20001028 	.word	0x20001028

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <BSP_LCD_GLASS_Init+0x70>)
 800081c:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000826:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800082a:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 800082e:	220c      	movs	r2, #12
 8000830:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000834:	2240      	movs	r2, #64	; 0x40
 8000836:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000840:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000844:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 800084e:	2240      	movs	r2, #64	; 0x40
 8000850:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000860:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 800086e:	f000 f831 	bl	80008d4 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <BSP_LCD_GLASS_Init+0x6c>)
 8000874:	f001 f834 	bl	80018e0 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8000878:	f000 f822 	bl	80008c0 <BSP_LCD_GLASS_Clear>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000f88 	.word	0x20000f88
 8000884:	40002400 	.word	0x40002400

08000888 <BSP_LCD_GLASS_DisplayChar>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_DisplayChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	4608      	mov	r0, r1
 8000892:	4611      	mov	r1, r2
 8000894:	461a      	mov	r2, r3
 8000896:	4603      	mov	r3, r0
 8000898:	70fb      	strb	r3, [r7, #3]
 800089a:	460b      	mov	r3, r1
 800089c:	70bb      	strb	r3, [r7, #2]
 800089e:	4613      	mov	r3, r2
 80008a0:	707b      	strb	r3, [r7, #1]
  WriteChar(ch, Point, Colon, Position);
 80008a2:	787b      	ldrb	r3, [r7, #1]
 80008a4:	78ba      	ldrb	r2, [r7, #2]
 80008a6:	78f9      	ldrb	r1, [r7, #3]
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f995 	bl	8000bd8 <WriteChar>

  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <BSP_LCD_GLASS_DisplayChar+0x34>)
 80008b0:	f001 f987 	bl	8001bc2 <HAL_LCD_UpdateDisplayRequest>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000f88 	.word	0x20000f88

080008c0 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <BSP_LCD_GLASS_Clear+0x10>)
 80008c6:	f001 f926 	bl	8001b16 <HAL_LCD_Clear>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000f88 	.word	0x20000f88

080008d4 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0c0      	sub	sp, #256	; 0x100
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80008dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80008ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80008f0:	2244      	movs	r2, #68	; 0x44
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 f9ef 	bl	8004cd8 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2288      	movs	r2, #136	; 0x88
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f004 f9e8 	bl	8004cd8 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <LCD_MspInit+0x17c>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <LCD_MspInit+0x17c>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <LCD_MspInit+0x17c>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8000920:	2304      	movs	r3, #4
 8000922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8000932:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fa02 	bl	8001d40 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d000      	beq.n	8000944 <LCD_MspInit+0x70>
  {
    while (1);
 8000942:	e7fe      	b.n	8000942 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000948:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fff8 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <LCD_MspInit+0x17c>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	4a3b      	ldr	r2, [pc, #236]	; (8000a50 <LCD_MspInit+0x17c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000968:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <LCD_MspInit+0x17c>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <LCD_MspInit+0x17c>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	4a35      	ldr	r2, [pc, #212]	; (8000a50 <LCD_MspInit+0x17c>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <LCD_MspInit+0x17c>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <LCD_MspInit+0x17c>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <LCD_MspInit+0x17c>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <LCD_MspInit+0x17c>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <LCD_MspInit+0x17c>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <LCD_MspInit+0x17c>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <LCD_MspInit+0x17c>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 80009bc:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80009c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 80009d6:	230b      	movs	r3, #11
 80009d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 80009dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fdbb 	bl	8001560 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80009ea:	f24f 2333 	movw	r3, #62003	; 0xf233
 80009ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80009f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80009f6:	4619      	mov	r1, r3
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <LCD_MspInit+0x180>)
 80009fa:	f000 fdb1 	bl	8001560 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80009fe:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000a06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <LCD_MspInit+0x184>)
 8000a0e:	f000 fda7 	bl	8001560 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8000a12:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8000a1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <LCD_MspInit+0x188>)
 8000a22:	f000 fd9d 	bl	8001560 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f000 fc96 	bl	8001358 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <LCD_MspInit+0x17c>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <LCD_MspInit+0x17c>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a36:	6593      	str	r3, [r2, #88]	; 0x58
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LCD_MspInit+0x17c>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
}
 8000a44:	bf00      	nop
 8000a46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400
 8000a58:	48000800 	.word	0x48000800
 8000a5c:	48000c00 	.word	0x48000c00

08000a60 <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 8000a70:	2300      	movs	r3, #0
 8000a72:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	737b      	strb	r3, [r7, #13]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b2d      	cmp	r3, #45	; 0x2d
 8000a82:	d03c      	beq.n	8000afe <Convert+0x9e>
 8000a84:	2b2d      	cmp	r3, #45	; 0x2d
 8000a86:	dc0f      	bgt.n	8000aa8 <Convert+0x48>
 8000a88:	2b28      	cmp	r3, #40	; 0x28
 8000a8a:	d026      	beq.n	8000ada <Convert+0x7a>
 8000a8c:	2b28      	cmp	r3, #40	; 0x28
 8000a8e:	dc04      	bgt.n	8000a9a <Convert+0x3a>
 8000a90:	2b20      	cmp	r3, #32
 8000a92:	d01b      	beq.n	8000acc <Convert+0x6c>
 8000a94:	2b25      	cmp	r3, #37	; 0x25
 8000a96:	d03d      	beq.n	8000b14 <Convert+0xb4>
 8000a98:	e04c      	b.n	8000b34 <Convert+0xd4>
 8000a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000a9c:	d019      	beq.n	8000ad2 <Convert+0x72>
 8000a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8000aa0:	db1e      	blt.n	8000ae0 <Convert+0x80>
 8000aa2:	2b2b      	cmp	r3, #43	; 0x2b
 8000aa4:	d02f      	beq.n	8000b06 <Convert+0xa6>
 8000aa6:	e045      	b.n	8000b34 <Convert+0xd4>
 8000aa8:	2b64      	cmp	r3, #100	; 0x64
 8000aaa:	d01c      	beq.n	8000ae6 <Convert+0x86>
 8000aac:	2b64      	cmp	r3, #100	; 0x64
 8000aae:	dc06      	bgt.n	8000abe <Convert+0x5e>
 8000ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ab2:	d02c      	beq.n	8000b0e <Convert+0xae>
 8000ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ab6:	db3d      	blt.n	8000b34 <Convert+0xd4>
 8000ab8:	2b39      	cmp	r3, #57	; 0x39
 8000aba:	dc3b      	bgt.n	8000b34 <Convert+0xd4>
 8000abc:	e032      	b.n	8000b24 <Convert+0xc4>
 8000abe:	2b6e      	cmp	r3, #110	; 0x6e
 8000ac0:	d019      	beq.n	8000af6 <Convert+0x96>
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d02a      	beq.n	8000b1c <Convert+0xbc>
 8000ac6:	2b6d      	cmp	r3, #109	; 0x6d
 8000ac8:	d011      	beq.n	8000aee <Convert+0x8e>
 8000aca:	e033      	b.n	8000b34 <Convert+0xd4>
  {
    case ' ' :
      ch = 0x00;
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
      break;
 8000ad0:	e04f      	b.n	8000b72 <Convert+0x112>

    case '*':
      ch = C_STAR;
 8000ad2:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8000ad6:	81fb      	strh	r3, [r7, #14]
      break;
 8000ad8:	e04b      	b.n	8000b72 <Convert+0x112>

    case '(' :
      ch = C_OPENPARMAP;
 8000ada:	2328      	movs	r3, #40	; 0x28
 8000adc:	81fb      	strh	r3, [r7, #14]
      break;
 8000ade:	e048      	b.n	8000b72 <Convert+0x112>

    case ')' :
      ch = C_CLOSEPARMAP;
 8000ae0:	2311      	movs	r3, #17
 8000ae2:	81fb      	strh	r3, [r7, #14]
      break;
 8000ae4:	e045      	b.n	8000b72 <Convert+0x112>

    case 'd' :
      ch = C_DMAP;
 8000ae6:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8000aea:	81fb      	strh	r3, [r7, #14]
      break;
 8000aec:	e041      	b.n	8000b72 <Convert+0x112>

    case 'm' :
      ch = C_MMAP;
 8000aee:	f24b 2310 	movw	r3, #45584	; 0xb210
 8000af2:	81fb      	strh	r3, [r7, #14]
      break;
 8000af4:	e03d      	b.n	8000b72 <Convert+0x112>

    case 'n' :
      ch = C_NMAP;
 8000af6:	f242 2310 	movw	r3, #8720	; 0x2210
 8000afa:	81fb      	strh	r3, [r7, #14]
      break;
 8000afc:	e039      	b.n	8000b72 <Convert+0x112>
    case 'µ' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 8000afe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b02:	81fb      	strh	r3, [r7, #14]
      break;
 8000b04:	e035      	b.n	8000b72 <Convert+0x112>

    case '+' :
      ch = C_PLUS;
 8000b06:	f24a 0314 	movw	r3, #40980	; 0xa014
 8000b0a:	81fb      	strh	r3, [r7, #14]
      break;
 8000b0c:	e031      	b.n	8000b72 <Convert+0x112>

    case '/' :
      ch = C_SLATCH;
 8000b0e:	23c0      	movs	r3, #192	; 0xc0
 8000b10:	81fb      	strh	r3, [r7, #14]
      break;
 8000b12:	e02e      	b.n	8000b72 <Convert+0x112>

    case '°' :
      ch = C_PERCENT_1;
      break;
    case '%' :
      ch = C_PERCENT_2;
 8000b14:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 8000b18:	81fb      	strh	r3, [r7, #14]
      break;
 8000b1a:	e02a      	b.n	8000b72 <Convert+0x112>
    case 255 :
      ch = C_FULL;
 8000b1c:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 8000b20:	81fb      	strh	r3, [r7, #14]
      break ;
 8000b22:	e026      	b.n	8000b72 <Convert+0x112>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3b30      	subs	r3, #48	; 0x30
 8000b2a:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <Convert+0x16c>)
 8000b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b30:	81fb      	strh	r3, [r7, #14]
      break;
 8000b32:	e01e      	b.n	8000b72 <Convert+0x112>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b5a      	cmp	r3, #90	; 0x5a
 8000b3a:	d80a      	bhi.n	8000b52 <Convert+0xf2>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b40      	cmp	r3, #64	; 0x40
 8000b42:	d906      	bls.n	8000b52 <Convert+0xf2>
      {
        ch = CapLetterMap[*Char - 'A'];
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3b41      	subs	r3, #65	; 0x41
 8000b4a:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <Convert+0x170>)
 8000b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b50:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b7a      	cmp	r3, #122	; 0x7a
 8000b58:	d80a      	bhi.n	8000b70 <Convert+0x110>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b60      	cmp	r3, #96	; 0x60
 8000b60:	d906      	bls.n	8000b70 <Convert+0x110>
      {
        ch = CapLetterMap[*Char - 'a'];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3b61      	subs	r3, #97	; 0x61
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <Convert+0x170>)
 8000b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b6e:	81fb      	strh	r3, [r7, #14]
      }
      break;
 8000b70:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d103      	bne.n	8000b80 <Convert+0x120>
  {
    ch |= 0x0002;
 8000b78:	89fb      	ldrh	r3, [r7, #14]
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 8000b80:	78bb      	ldrb	r3, [r7, #2]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d103      	bne.n	8000b8e <Convert+0x12e>
  {
    ch |= 0x0020;
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	f043 0320 	orr.w	r3, r3, #32
 8000b8c:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8000b8e:	230c      	movs	r3, #12
 8000b90:	737b      	strb	r3, [r7, #13]
 8000b92:	2300      	movs	r3, #0
 8000b94:	733b      	strb	r3, [r7, #12]
 8000b96:	e010      	b.n	8000bba <Convert+0x15a>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8000b98:	89fa      	ldrh	r2, [r7, #14]
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	fa42 f303 	asr.w	r3, r2, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	7b3b      	ldrb	r3, [r7, #12]
 8000ba4:	f002 020f 	and.w	r2, r2, #15
 8000ba8:	490a      	ldr	r1, [pc, #40]	; (8000bd4 <Convert+0x174>)
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	737b      	strb	r3, [r7, #13]
 8000bb4:	7b3b      	ldrb	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	733b      	strb	r3, [r7, #12]
 8000bba:	7b3b      	ldrb	r3, [r7, #12]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d9eb      	bls.n	8000b98 <Convert+0x138>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	08004dd8 	.word	0x08004dd8
 8000bd0:	08004da4 	.word	0x08004da4
 8000bd4:	20001014 	.word	0x20001014

08000bd8 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4603      	mov	r3, r0
 8000be8:	70fb      	strb	r3, [r7, #3]
 8000bea:	460b      	mov	r3, r1
 8000bec:	70bb      	strb	r3, [r7, #2]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 8000bf6:	78ba      	ldrb	r2, [r7, #2]
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff2f 	bl	8000a60 <Convert>

  switch (Position)
 8000c02:	787b      	ldrb	r3, [r7, #1]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	f200 835b 	bhi.w	80012c0 <WriteChar+0x6e8>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <WriteChar+0x38>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000d23 	.word	0x08000d23
 8000c18:	08000e3d 	.word	0x08000e3d
 8000c1c:	08000f3f 	.word	0x08000f3f
 8000c20:	0800106d 	.word	0x0800106d
 8000c24:	080011b7 	.word	0x080011b7
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <WriteChar+0x254>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	f003 0210 	and.w	r2, r3, #16
 8000c32:	4b7e      	ldr	r3, [pc, #504]	; (8000e2c <WriteChar+0x254>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c3e:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000c40:	4b7a      	ldr	r3, [pc, #488]	; (8000e2c <WriteChar+0x254>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	059b      	lsls	r3, r3, #22
 8000c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	4b77      	ldr	r3, [pc, #476]	; (8000e2c <WriteChar+0x254>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4a74      	ldr	r2, [pc, #464]	; (8000e30 <WriteChar+0x258>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4874      	ldr	r0, [pc, #464]	; (8000e34 <WriteChar+0x25c>)
 8000c62:	f000 fefd 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000c66:	4b71      	ldr	r3, [pc, #452]	; (8000e2c <WriteChar+0x254>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	f003 0210 	and.w	r2, r3, #16
 8000c70:	4b6e      	ldr	r3, [pc, #440]	; (8000e2c <WriteChar+0x254>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	085b      	lsrs	r3, r3, #1
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c7c:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000c7e:	4b6b      	ldr	r3, [pc, #428]	; (8000e2c <WriteChar+0x254>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	059b      	lsls	r3, r3, #22
 8000c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <WriteChar+0x254>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a65      	ldr	r2, [pc, #404]	; (8000e30 <WriteChar+0x258>)
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4865      	ldr	r0, [pc, #404]	; (8000e34 <WriteChar+0x25c>)
 8000ca0:	f000 fede 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000ca4:	4b61      	ldr	r3, [pc, #388]	; (8000e2c <WriteChar+0x254>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	f003 0210 	and.w	r2, r3, #16
 8000cae:	4b5f      	ldr	r3, [pc, #380]	; (8000e2c <WriteChar+0x254>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cba:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000cbc:	4b5b      	ldr	r3, [pc, #364]	; (8000e2c <WriteChar+0x254>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	059b      	lsls	r3, r3, #22
 8000cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <WriteChar+0x254>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a55      	ldr	r2, [pc, #340]	; (8000e30 <WriteChar+0x258>)
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4855      	ldr	r0, [pc, #340]	; (8000e34 <WriteChar+0x25c>)
 8000cde:	f000 febf 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000ce2:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <WriteChar+0x254>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	f003 0210 	and.w	r2, r3, #16
 8000cec:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <WriteChar+0x254>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cf8:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <WriteChar+0x254>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	059b      	lsls	r3, r3, #22
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4b48      	ldr	r3, [pc, #288]	; (8000e2c <WriteChar+0x254>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a46      	ldr	r2, [pc, #280]	; (8000e30 <WriteChar+0x258>)
 8000d18:	2106      	movs	r1, #6
 8000d1a:	4846      	ldr	r0, [pc, #280]	; (8000e34 <WriteChar+0x25c>)
 8000d1c:	f000 fea0 	bl	8001a60 <HAL_LCD_Write>
      break;
 8000d20:	e2cf      	b.n	80012c2 <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000d22:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <WriteChar+0x254>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	019b      	lsls	r3, r3, #6
 8000d28:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <WriteChar+0x254>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	035b      	lsls	r3, r3, #13
 8000d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d38:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000d3a:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <WriteChar+0x254>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	031b      	lsls	r3, r3, #12
 8000d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d46:	431a      	orrs	r2, r3
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <WriteChar+0x254>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4a37      	ldr	r2, [pc, #220]	; (8000e38 <WriteChar+0x260>)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4835      	ldr	r0, [pc, #212]	; (8000e34 <WriteChar+0x25c>)
 8000d60:	f000 fe7e 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <WriteChar+0x254>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <WriteChar+0x254>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	035b      	lsls	r3, r3, #13
 8000d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7a:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <WriteChar+0x254>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	031b      	lsls	r3, r3, #12
 8000d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <WriteChar+0x254>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	015b      	lsls	r3, r3, #5
 8000d92:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <WriteChar+0x260>)
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <WriteChar+0x25c>)
 8000da2:	f000 fe5d 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <WriteChar+0x254>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	019b      	lsls	r3, r3, #6
 8000dac:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <WriteChar+0x254>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	035b      	lsls	r3, r3, #13
 8000db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dbc:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <WriteChar+0x254>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	031b      	lsls	r3, r3, #12
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <WriteChar+0x254>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	08db      	lsrs	r3, r3, #3
 8000dd2:	015b      	lsls	r3, r3, #5
 8000dd4:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <WriteChar+0x260>)
 8000de0:	2104      	movs	r1, #4
 8000de2:	4814      	ldr	r0, [pc, #80]	; (8000e34 <WriteChar+0x25c>)
 8000de4:	f000 fe3c 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <WriteChar+0x254>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <WriteChar+0x254>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	035b      	lsls	r3, r3, #13
 8000dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dfe:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <WriteChar+0x254>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	031b      	lsls	r3, r3, #12
 8000e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <WriteChar+0x254>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <WriteChar+0x260>)
 8000e22:	2106      	movs	r1, #6
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <WriteChar+0x25c>)
 8000e26:	f000 fe1b 	bl	8001a60 <HAL_LCD_Write>
      break;
 8000e2a:	e24a      	b.n	80012c2 <WriteChar+0x6ea>
 8000e2c:	20001014 	.word	0x20001014
 8000e30:	ff3fffe7 	.word	0xff3fffe7
 8000e34:	20000f88 	.word	0x20000f88
 8000e38:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000e3c:	4b88      	ldr	r3, [pc, #544]	; (8001060 <WriteChar+0x488>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	03db      	lsls	r3, r3, #15
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b86      	ldr	r3, [pc, #536]	; (8001060 <WriteChar+0x488>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	085b      	lsrs	r3, r3, #1
 8000e4a:	075b      	lsls	r3, r3, #29
 8000e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e50:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000e52:	4b83      	ldr	r3, [pc, #524]	; (8001060 <WriteChar+0x488>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	071b      	lsls	r3, r3, #28
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	4b7f      	ldr	r3, [pc, #508]	; (8001060 <WriteChar+0x488>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	039b      	lsls	r3, r3, #14
 8000e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4a7c      	ldr	r2, [pc, #496]	; (8001064 <WriteChar+0x48c>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	487c      	ldr	r0, [pc, #496]	; (8001068 <WriteChar+0x490>)
 8000e78:	f000 fdf2 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000e7c:	4b78      	ldr	r3, [pc, #480]	; (8001060 <WriteChar+0x488>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	03db      	lsls	r3, r3, #15
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b76      	ldr	r3, [pc, #472]	; (8001060 <WriteChar+0x488>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	085b      	lsrs	r3, r3, #1
 8000e8a:	075b      	lsls	r3, r3, #29
 8000e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e90:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000e92:	4b73      	ldr	r3, [pc, #460]	; (8001060 <WriteChar+0x488>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	071b      	lsls	r3, r3, #28
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	4b6f      	ldr	r3, [pc, #444]	; (8001060 <WriteChar+0x488>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	039b      	lsls	r3, r3, #14
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a6c      	ldr	r2, [pc, #432]	; (8001064 <WriteChar+0x48c>)
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <WriteChar+0x490>)
 8000eb8:	f000 fdd2 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ebc:	4b68      	ldr	r3, [pc, #416]	; (8001060 <WriteChar+0x488>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	03db      	lsls	r3, r3, #15
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b66      	ldr	r3, [pc, #408]	; (8001060 <WriteChar+0x488>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	085b      	lsrs	r3, r3, #1
 8000eca:	075b      	lsls	r3, r3, #29
 8000ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed0:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ed2:	4b63      	ldr	r3, [pc, #396]	; (8001060 <WriteChar+0x488>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	071b      	lsls	r3, r3, #28
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <WriteChar+0x488>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	039b      	lsls	r3, r3, #14
 8000ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a5c      	ldr	r2, [pc, #368]	; (8001064 <WriteChar+0x48c>)
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	485c      	ldr	r0, [pc, #368]	; (8001068 <WriteChar+0x490>)
 8000ef8:	f000 fdb2 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000efc:	4b58      	ldr	r3, [pc, #352]	; (8001060 <WriteChar+0x488>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	03db      	lsls	r3, r3, #15
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b56      	ldr	r3, [pc, #344]	; (8001060 <WriteChar+0x488>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	075b      	lsls	r3, r3, #29
 8000f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f10:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000f12:	4b53      	ldr	r3, [pc, #332]	; (8001060 <WriteChar+0x488>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	071b      	lsls	r3, r3, #28
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <WriteChar+0x488>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	039b      	lsls	r3, r3, #14
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <WriteChar+0x48c>)
 8000f34:	2106      	movs	r1, #6
 8000f36:	484c      	ldr	r0, [pc, #304]	; (8001068 <WriteChar+0x490>)
 8000f38:	f000 fd92 	bl	8001a60 <HAL_LCD_Write>
      break;
 8000f3c:	e1c1      	b.n	80012c2 <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000f3e:	4b48      	ldr	r3, [pc, #288]	; (8001060 <WriteChar+0x488>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	07da      	lsls	r2, r3, #31
 8000f44:	4b46      	ldr	r3, [pc, #280]	; (8001060 <WriteChar+0x488>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	079b      	lsls	r3, r3, #30
 8000f4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4842      	ldr	r0, [pc, #264]	; (8001068 <WriteChar+0x490>)
 8000f5e:	f000 fd7f 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <WriteChar+0x488>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0202 	and.w	r2, r3, #2
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <WriteChar+0x488>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f06f 0203 	mvn.w	r2, #3
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <WriteChar+0x490>)
 8000f82:	f000 fd6d 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <WriteChar+0x488>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	07da      	lsls	r2, r3, #31
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <WriteChar+0x488>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	079b      	lsls	r3, r3, #30
 8000f94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	4830      	ldr	r0, [pc, #192]	; (8001068 <WriteChar+0x490>)
 8000fa6:	f000 fd5b 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <WriteChar+0x488>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0202 	and.w	r2, r3, #2
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <WriteChar+0x488>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f06f 0203 	mvn.w	r2, #3
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	4827      	ldr	r0, [pc, #156]	; (8001068 <WriteChar+0x490>)
 8000fca:	f000 fd49 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <WriteChar+0x488>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	07da      	lsls	r2, r3, #31
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <WriteChar+0x488>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	079b      	lsls	r3, r3, #30
 8000fdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000fea:	2104      	movs	r1, #4
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <WriteChar+0x490>)
 8000fee:	f000 fd37 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <WriteChar+0x488>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0202 	and.w	r2, r3, #2
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <WriteChar+0x488>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	4313      	orrs	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f06f 0203 	mvn.w	r2, #3
 800100e:	2105      	movs	r1, #5
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <WriteChar+0x490>)
 8001012:	f000 fd25 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <WriteChar+0x488>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	07da      	lsls	r2, r3, #31
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <WriteChar+0x488>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	079b      	lsls	r3, r3, #30
 8001024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001028:	4313      	orrs	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8001032:	2106      	movs	r1, #6
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <WriteChar+0x490>)
 8001036:	f000 fd13 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <WriteChar+0x488>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f003 0202 	and.w	r2, r3, #2
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <WriteChar+0x488>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	4313      	orrs	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f06f 0203 	mvn.w	r2, #3
 8001056:	2107      	movs	r1, #7
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <WriteChar+0x490>)
 800105a:	f000 fd01 	bl	8001a60 <HAL_LCD_Write>
      break;
 800105e:	e130      	b.n	80012c2 <WriteChar+0x6ea>
 8001060:	20001014 	.word	0x20001014
 8001064:	cfff3fff 	.word	0xcfff3fff
 8001068:	20000f88 	.word	0x20000f88

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800106c:	4b97      	ldr	r3, [pc, #604]	; (80012cc <WriteChar+0x6f4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	085b      	lsrs	r3, r3, #1
 8001072:	065b      	lsls	r3, r3, #25
 8001074:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8001078:	4b94      	ldr	r3, [pc, #592]	; (80012cc <WriteChar+0x6f4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	061b      	lsls	r3, r3, #24
 8001080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001084:	4313      	orrs	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800108e:	2100      	movs	r1, #0
 8001090:	488f      	ldr	r0, [pc, #572]	; (80012d0 <WriteChar+0x6f8>)
 8001092:	f000 fce5 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001096:	4b8d      	ldr	r3, [pc, #564]	; (80012cc <WriteChar+0x6f4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	f003 0208 	and.w	r2, r3, #8
 80010a0:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <WriteChar+0x6f4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f06f 020c 	mvn.w	r2, #12
 80010b6:	2101      	movs	r1, #1
 80010b8:	4885      	ldr	r0, [pc, #532]	; (80012d0 <WriteChar+0x6f8>)
 80010ba:	f000 fcd1 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <WriteChar+0x6f4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	065b      	lsls	r3, r3, #25
 80010c6:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80010ca:	4b80      	ldr	r3, [pc, #512]	; (80012cc <WriteChar+0x6f4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80010e0:	2102      	movs	r1, #2
 80010e2:	487b      	ldr	r0, [pc, #492]	; (80012d0 <WriteChar+0x6f8>)
 80010e4:	f000 fcbc 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80010e8:	4b78      	ldr	r3, [pc, #480]	; (80012cc <WriteChar+0x6f4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	f003 0208 	and.w	r2, r3, #8
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <WriteChar+0x6f4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f06f 020c 	mvn.w	r2, #12
 8001108:	2103      	movs	r1, #3
 800110a:	4871      	ldr	r0, [pc, #452]	; (80012d0 <WriteChar+0x6f8>)
 800110c:	f000 fca8 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8001110:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <WriteChar+0x6f4>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	065b      	lsls	r3, r3, #25
 8001118:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <WriteChar+0x6f4>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	061b      	lsls	r3, r3, #24
 8001124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001128:	4313      	orrs	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8001132:	2104      	movs	r1, #4
 8001134:	4866      	ldr	r0, [pc, #408]	; (80012d0 <WriteChar+0x6f8>)
 8001136:	f000 fc93 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <WriteChar+0x6f4>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	f003 0208 	and.w	r2, r3, #8
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <WriteChar+0x6f4>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	4313      	orrs	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f06f 020c 	mvn.w	r2, #12
 800115a:	2105      	movs	r1, #5
 800115c:	485c      	ldr	r0, [pc, #368]	; (80012d0 <WriteChar+0x6f8>)
 800115e:	f000 fc7f 	bl	8001a60 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <WriteChar+0x6f4>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	065b      	lsls	r3, r3, #25
 800116a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800116e:	4b57      	ldr	r3, [pc, #348]	; (80012cc <WriteChar+0x6f4>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	061b      	lsls	r3, r3, #24
 8001176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8001184:	2106      	movs	r1, #6
 8001186:	4852      	ldr	r0, [pc, #328]	; (80012d0 <WriteChar+0x6f8>)
 8001188:	f000 fc6a 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <WriteChar+0x6f4>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	f003 0208 	and.w	r2, r3, #8
 8001196:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <WriteChar+0x6f4>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f06f 020c 	mvn.w	r2, #12
 80011ac:	2107      	movs	r1, #7
 80011ae:	4848      	ldr	r0, [pc, #288]	; (80012d0 <WriteChar+0x6f8>)
 80011b0:	f000 fc56 	bl	8001a60 <HAL_LCD_Write>
      break;
 80011b4:	e085      	b.n	80012c2 <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <WriteChar+0x6f4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	045b      	lsls	r3, r3, #17
 80011bc:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80011c0:	4b42      	ldr	r3, [pc, #264]	; (80012cc <WriteChar+0x6f4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	085b      	lsrs	r3, r3, #1
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <WriteChar+0x6f4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	025b      	lsls	r3, r3, #9
 80011d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011da:	431a      	orrs	r2, r3
 80011dc:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <WriteChar+0x6f4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	069b      	lsls	r3, r3, #26
 80011e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <WriteChar+0x6fc>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	4837      	ldr	r0, [pc, #220]	; (80012d0 <WriteChar+0x6f8>)
 80011f4:	f000 fc34 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <WriteChar+0x6f4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	045b      	lsls	r3, r3, #17
 80011fe:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <WriteChar+0x6f4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <WriteChar+0x6f4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800121c:	431a      	orrs	r2, r3
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <WriteChar+0x6f4>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	069b      	lsls	r3, r3, #26
 8001226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800122a:	4313      	orrs	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <WriteChar+0x6fc>)
 8001232:	2102      	movs	r1, #2
 8001234:	4826      	ldr	r0, [pc, #152]	; (80012d0 <WriteChar+0x6f8>)
 8001236:	f000 fc13 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <WriteChar+0x6f4>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	045b      	lsls	r3, r3, #17
 8001240:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <WriteChar+0x6f4>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <WriteChar+0x6f4>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125e:	431a      	orrs	r2, r3
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <WriteChar+0x6f4>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	069b      	lsls	r3, r3, #26
 8001268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800126c:	4313      	orrs	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <WriteChar+0x6fc>)
 8001274:	2104      	movs	r1, #4
 8001276:	4816      	ldr	r0, [pc, #88]	; (80012d0 <WriteChar+0x6f8>)
 8001278:	f000 fbf2 	bl	8001a60 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <WriteChar+0x6f4>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	045b      	lsls	r3, r3, #17
 8001282:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <WriteChar+0x6f4>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <WriteChar+0x6f4>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a0:	431a      	orrs	r2, r3
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <WriteChar+0x6f4>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	08db      	lsrs	r3, r3, #3
 80012a8:	069b      	lsls	r3, r3, #26
 80012aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <WriteChar+0x6fc>)
 80012b6:	2106      	movs	r1, #6
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <WriteChar+0x6f8>)
 80012ba:	f000 fbd1 	bl	8001a60 <HAL_LCD_Write>
      break;
 80012be:	e000      	b.n	80012c2 <WriteChar+0x6ea>

    default:
      break;
 80012c0:	bf00      	nop
  }
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20001014 	.word	0x20001014
 80012d0:	20000f88 	.word	0x20000f88
 80012d4:	fbfdfcff 	.word	0xfbfdfcff

080012d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_Init+0x3c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_Init+0x3c>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 f901 	bl	80014f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff f9b7 	bl	8000668 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	e001      	b.n	800130a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001306:	f7ff f907 	bl	8000518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800130a:	79fb      	ldrb	r3, [r7, #7]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40022000 	.word	0x40022000

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20001024 	.word	0x20001024

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20001024 	.word	0x20001024

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_Delay+0x40>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000008 	.word	0x20000008

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff4c 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800151e:	f7ff ff61 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001522:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	6978      	ldr	r0, [r7, #20]
 800152a:	f7ff ffb1 	bl	8001490 <NVIC_EncodePriority>
 800152e:	4602      	mov	r2, r0
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff80 	bl	800143c <__NVIC_SetPriority>
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff54 	bl	8001400 <__NVIC_EnableIRQ>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e17f      	b.n	8001870 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8171 	beq.w	800186a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d00b      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159c:	2b11      	cmp	r3, #17
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d130      	bne.n	800160a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015de:	2201      	movs	r2, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b03      	cmp	r3, #3
 8001614:	d118      	bne.n	8001648 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x128>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b12      	cmp	r3, #18
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ac 	beq.w	800186a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_GPIO_Init+0x32c>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a5d      	ldr	r2, [pc, #372]	; (800188c <HAL_GPIO_Init+0x32c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_GPIO_Init+0x32c>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172a:	4a59      	ldr	r2, [pc, #356]	; (8001890 <HAL_GPIO_Init+0x330>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_GPIO_Init+0x334>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <HAL_GPIO_Init+0x338>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x33c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x340>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x344>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x348>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x22a>
 8001786:	2306      	movs	r3, #6
 8001788:	e00c      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178a:	2307      	movs	r3, #7
 800178c:	e00a      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178e:	2305      	movs	r3, #5
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001792:	2304      	movs	r3, #4
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 80017a2:	2300      	movs	r3, #0
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017b4:	4936      	ldr	r1, [pc, #216]	; (8001890 <HAL_GPIO_Init+0x330>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <HAL_GPIO_Init+0x34c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_GPIO_Init+0x34c>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_GPIO_Init+0x34c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_GPIO_Init+0x34c>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_GPIO_Init+0x34c>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_GPIO_Init+0x34c>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_GPIO_Init+0x34c>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001864:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_GPIO_Init+0x34c>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae78 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000
 8001894:	48000400 	.word	0x48000400
 8001898:	48000800 	.word	0x48000800
 800189c:	48000c00 	.word	0x48000c00
 80018a0:	48001000 	.word	0x48001000
 80018a4:	48001400 	.word	0x48001400
 80018a8:	48001800 	.word	0x48001800
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e001      	b.n	80018d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0af      	b.n	8001a52 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fe2e 	bl	8000568 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00a      	b.n	8001940 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3304      	adds	r3, #4
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	d9f1      	bls.n	800192a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0204 	orr.w	r2, r2, #4
 8001954:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_LCD_Init+0x17c>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6851      	ldr	r1, [r2, #4]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6892      	ldr	r2, [r2, #8]
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800196e:	4311      	orrs	r1, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001974:	4311      	orrs	r1, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	69d2      	ldr	r2, [r2, #28]
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6a12      	ldr	r2, [r2, #32]
 8001980:	4311      	orrs	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6992      	ldr	r2, [r2, #24]
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	430b      	orrs	r3, r1
 8001994:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f94c 	bl	8001c34 <LCD_WaitForSynchro>
 800199c:	4603      	mov	r3, r0
 800199e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80019a0:	7cfb      	ldrb	r3, [r7, #19]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_LCD_Init+0xca>
  {
    return status;
 80019a6:	7cfb      	ldrb	r3, [r7, #19]
 80019a8:	e053      	b.n	8001a52 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80019e2:	f7ff fcad 	bl	8001340 <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80019e8:	e00c      	b.n	8001a04 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80019ea:	f7ff fca9 	bl	8001340 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f8:	d904      	bls.n	8001a04 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2208      	movs	r2, #8
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e026      	b.n	8001a52 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d1eb      	bne.n	80019ea <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001a12:	f7ff fc95 	bl	8001340 <HAL_GetTick>
 8001a16:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001a18:	e00c      	b.n	8001a34 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001a1a:	f7ff fc91 	bl	8001340 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a28:	d904      	bls.n	8001a34 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e00e      	b.n	8001a52 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d1eb      	bne.n	8001a1a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	fc00000e 	.word	0xfc00000e

08001a60 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a74:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d002      	beq.n	8001a82 <HAL_LCD_Write+0x22>
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d144      	bne.n	8001b0c <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d12a      	bne.n	8001ae4 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_LCD_Write+0x3c>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e038      	b.n	8001b0e <HAL_LCD_Write+0xae>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fc48 	bl	8001340 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001ab2:	e010      	b.n	8001ad6 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001ab4:	f7ff fc44 	bl	8001340 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac2:	d908      	bls.n	8001ad6 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e01b      	b.n	8001b0e <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d0e7      	beq.n	8001ab4 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3304      	adds	r3, #4
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	401a      	ands	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3304      	adds	r3, #4
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e000      	b.n	8001b0e <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
  }
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001b2a:	7cbb      	ldrb	r3, [r7, #18]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d002      	beq.n	8001b36 <HAL_LCD_Clear+0x20>
 8001b30:	7cbb      	ldrb	r3, [r7, #18]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d140      	bne.n	8001bb8 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_LCD_Clear+0x2e>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e03a      	b.n	8001bba <HAL_LCD_Clear+0xa4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b54:	f7ff fbf4 	bl	8001340 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001b5a:	e010      	b.n	8001b7e <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b5c:	f7ff fbf0 	bl	8001340 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b6a:	d908      	bls.n	8001b7e <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e01d      	b.n	8001bba <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d0e7      	beq.n	8001b5c <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00a      	b.n	8001ba8 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	d9f1      	bls.n	8001b92 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f807 	bl	8001bc2 <HAL_LCD_UpdateDisplayRequest>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0204 	orr.w	r2, r2, #4
 8001be0:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001be2:	f7ff fbad 	bl	8001340 <HAL_GetTick>
 8001be6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001be8:	e010      	b.n	8001c0c <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001bea:	f7ff fba9 	bl	8001340 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf8:	d908      	bls.n	8001c0c <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e00f      	b.n	8001c2c <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d1e7      	bne.n	8001bea <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001c3c:	f7ff fb80 	bl	8001340 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001c42:	e00c      	b.n	8001c5e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001c44:	f7ff fb7c 	bl	8001340 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c52:	d904      	bls.n	8001c5e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e007      	b.n	8001c6e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d1eb      	bne.n	8001c44 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40007000 	.word	0x40007000

08001c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca2:	d130      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb0:	d038      	beq.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2232      	movs	r2, #50	; 0x32
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0c9b      	lsrs	r3, r3, #18
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd8:	e002      	b.n	8001ce0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cec:	d102      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f2      	bne.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d00:	d110      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e00f      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d007      	beq.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d1c:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40007000 	.word	0x40007000
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	431bde83 	.word	0x431bde83

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e3d4      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d52:	4ba1      	ldr	r3, [pc, #644]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5c:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80e4 	beq.w	8001f3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4a>
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	f040 808b 	bne.w	8001e98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	f040 8087 	bne.w	8001e98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8a:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x62>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e3ac      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1a      	ldr	r2, [r3, #32]
 8001da6:	4b8c      	ldr	r3, [pc, #560]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_RCC_OscConfig+0x7c>
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dba:	e005      	b.n	8001dc8 <HAL_RCC_OscConfig+0x88>
 8001dbc:	4b86      	ldr	r3, [pc, #536]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d223      	bcs.n	8001e14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fd5b 	bl	800288c <RCC_SetFlashLatencyFromMSIRange>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e38d      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de0:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a7c      	ldr	r2, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4977      	ldr	r1, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfe:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	4972      	ldr	r1, [pc, #456]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	e025      	b.n	8001e60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e14:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6f      	ldr	r2, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	496a      	ldr	r1, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e32:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fd1b 	bl	800288c <RCC_SetFlashLatencyFromMSIRange>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e34d      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e60:	f000 fc36 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	4a5a      	ldr	r2, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x29c>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_OscConfig+0x2a0>)
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e80:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x2a4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fbef 	bl	8000668 <HAL_InitTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d052      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	e331      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d032      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ea0:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fa48 	bl	8001340 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fa44 	bl	8001340 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e31a      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	493b      	ldr	r1, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e01a      	b.n	8001f3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fa15 	bl	8001340 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fa11 	bl	8001340 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e2e7      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x1da>
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d074      	beq.n	8002032 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d005      	beq.n	8001f5a <HAL_RCC_OscConfig+0x21a>
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	d10e      	bne.n	8001f72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d10b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d064      	beq.n	8002030 <HAL_RCC_OscConfig+0x2f0>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d160      	bne.n	8002030 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e2c4      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x24a>
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e01d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x286>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x26e>
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x286>
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01c      	beq.n	8002008 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f9b7 	bl	8001340 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd4:	e011      	b.n	8001ffa <HAL_RCC_OscConfig+0x2ba>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08004d5c 	.word	0x08004d5c
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f9aa 	bl	8001340 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e280      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffa:	4baf      	ldr	r3, [pc, #700]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2a8>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f99a 	bl	8001340 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff f996 	bl	8001340 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e26c      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002022:	4ba5      	ldr	r3, [pc, #660]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x2d0>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d060      	beq.n	8002100 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d005      	beq.n	8002050 <HAL_RCC_OscConfig+0x310>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d119      	bne.n	800207e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d116      	bne.n	800207e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002050:	4b99      	ldr	r3, [pc, #612]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x328>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e249      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b93      	ldr	r3, [pc, #588]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	4990      	ldr	r1, [pc, #576]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800207c:	e040      	b.n	8002100 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d023      	beq.n	80020ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002086:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a8b      	ldr	r2, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff f955 	bl	8001340 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff f951 	bl	8001340 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e227      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ac:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	497c      	ldr	r1, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	e018      	b.n	8002100 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a79      	ldr	r2, [pc, #484]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff f931 	bl	8001340 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff f92d 	bl	8001340 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e203      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f4:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03c      	beq.n	8002186 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01c      	beq.n	800214e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff f90c 	bl	8001340 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff f908 	bl	8001340 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1de      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213e:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCC_OscConfig+0x3ec>
 800214c:	e01b      	b.n	8002186 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214e:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff f8ef 	bl	8001340 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002166:	f7ff f8eb 	bl	8001340 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1c1      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002178:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80a6 	beq.w	80022e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002198:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a43      	ldr	r2, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c0:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d118      	bne.n	80021fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021cc:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d8:	f7ff f8b2 	bl	8001340 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7ff f8ae 	bl	8001340 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e184      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d8>
 8002206:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002216:	e024      	b.n	8002262 <HAL_RCC_OscConfig+0x522>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d110      	bne.n	8002242 <HAL_RCC_OscConfig+0x502>
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	e00f      	b.n	8002262 <HAL_RCC_OscConfig+0x522>
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff f869 	bl	8001340 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff f865 	bl	8001340 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e139      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ed      	beq.n	8002272 <HAL_RCC_OscConfig+0x532>
 8002296:	e01a      	b.n	80022ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f852 	bl	8001340 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800229e:	e00f      	b.n	80022c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7ff f84e 	bl	8001340 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d906      	bls.n	80022c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e122      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c0:	4b90      	ldr	r3, [pc, #576]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e8      	bne.n	80022a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4a8a      	ldr	r2, [pc, #552]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8108 	beq.w	80024fa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	f040 80d0 	bne.w	8002494 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022f4:	4b83      	ldr	r3, [pc, #524]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	429a      	cmp	r2, r3
 8002306:	d130      	bne.n	800236a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	3b01      	subs	r3, #1
 8002314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d127      	bne.n	800236a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d11f      	bne.n	800236a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002334:	2a07      	cmp	r2, #7
 8002336:	bf14      	ite	ne
 8002338:	2201      	movne	r2, #1
 800233a:	2200      	moveq	r2, #0
 800233c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800233e:	4293      	cmp	r3, r2
 8002340:	d113      	bne.n	800236a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	3b01      	subs	r3, #1
 8002350:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d109      	bne.n	800236a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d06e      	beq.n	8002448 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d069      	beq.n	8002444 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002370:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800237c:	4b61      	ldr	r3, [pc, #388]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0b7      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800238c:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002398:	f7fe ffd2 	bl	8001340 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe ffce 	bl	8001340 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0a4      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023be:	4b51      	ldr	r3, [pc, #324]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_OscConfig+0x7c8>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023ce:	3a01      	subs	r2, #1
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023d8:	0212      	lsls	r2, r2, #8
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e0:	0852      	lsrs	r2, r2, #1
 80023e2:	3a01      	subs	r2, #1
 80023e4:	0552      	lsls	r2, r2, #21
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ec:	0852      	lsrs	r2, r2, #1
 80023ee:	3a01      	subs	r2, #1
 80023f0:	0652      	lsls	r2, r2, #25
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023f8:	0912      	lsrs	r2, r2, #4
 80023fa:	0452      	lsls	r2, r2, #17
 80023fc:	430a      	orrs	r2, r1
 80023fe:	4941      	ldr	r1, [pc, #260]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800241c:	f7fe ff90 	bl	8001340 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe ff8c 	bl	8001340 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e062      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002442:	e05a      	b.n	80024fa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e059      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002448:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d152      	bne.n	80024fa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800246c:	f7fe ff68 	bl	8001340 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe ff64 	bl	8001340 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e03a      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x734>
 8002492:	e032      	b.n	80024fa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d02d      	beq.n	80024f6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024b8:	f023 0303 	bic.w	r3, r3, #3
 80024bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe ff37 	bl	8001340 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe ff33 	bl	8001340 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e009      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_OscConfig+0x7c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x796>
 80024f4:	e001      	b.n	80024fa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	f99d808c 	.word	0xf99d808c

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0c8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b66      	ldr	r3, [pc, #408]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4961      	ldr	r1, [pc, #388]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b0      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d04c      	beq.n	80025f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d107      	bne.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d121      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e09e      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d115      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e092      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e086      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e07e      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025b4:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 0203 	bic.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	493f      	ldr	r1, [pc, #252]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c6:	f7fe febb 	bl	8001340 <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ce:	f7fe feb7 	bl	8001340 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e066      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 020c 	and.w	r2, r3, #12
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d1eb      	bne.n	80025ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	492c      	ldr	r1, [pc, #176]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4924      	ldr	r1, [pc, #144]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e036      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4918      	ldr	r1, [pc, #96]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4910      	ldr	r1, [pc, #64]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002682:	f000 f825 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002686:	4601      	mov	r1, r0
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_ClockConfig+0x1b4>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	5cd3      	ldrb	r3, [r2, r3]
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	fa21 f303 	lsr.w	r3, r1, r3
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ffde 	bl	8000668 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80026b0:	7afb      	ldrb	r3, [r7, #11]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004d5c 	.word	0x08004d5c
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d121      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11e      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002704:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002710:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002734:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10d      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d102      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e004      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002756:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d133      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d002      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xa4>
 800276e:	2b03      	cmp	r3, #3
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0xaa>
 8002772:	e005      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002776:	617b      	str	r3, [r7, #20]
      break;
 8002778:	e005      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800277c:	617b      	str	r3, [r7, #20]
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	617b      	str	r3, [r7, #20]
      break;
 8002784:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	3301      	adds	r3, #1
 8002792:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	fb02 f203 	mul.w	r2, r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0e5b      	lsrs	r3, r3, #25
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027c6:	69bb      	ldr	r3, [r7, #24]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3724      	adds	r7, #36	; 0x24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08004d74 	.word	0x08004d74
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4601      	mov	r1, r0
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	08004d6c 	.word	0x08004d6c

08002828 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	220f      	movs	r2, #15
 8002836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_GetClockConfig+0x5c>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_GetClockConfig+0x5c>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCC_GetClockConfig+0x5c>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_GetClockConfig+0x5c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_RCC_GetClockConfig+0x60>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	40022000 	.word	0x40022000

0800288c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028a4:	f7ff f9e8 	bl	8001c78 <HAL_PWREx_GetVoltageRange>
 80028a8:	6178      	str	r0, [r7, #20]
 80028aa:	e014      	b.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6593      	str	r3, [r2, #88]	; 0x58
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028c4:	f7ff f9d8 	bl	8001c78 <HAL_PWREx_GetVoltageRange>
 80028c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028dc:	d10b      	bne.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d919      	bls.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2ba0      	cmp	r3, #160	; 0xa0
 80028e8:	d902      	bls.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ea:	2302      	movs	r3, #2
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e013      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f0:	2301      	movs	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e010      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d902      	bls.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028fc:	2303      	movs	r3, #3
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e00a      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d102      	bne.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002908:	2302      	movs	r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e004      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b70      	cmp	r3, #112	; 0x70
 8002912:	d101      	bne.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 0207 	bic.w	r2, r3, #7
 8002920:	4909      	ldr	r1, [pc, #36]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	40022000 	.word	0x40022000

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002954:	2300      	movs	r3, #0
 8002956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002958:	2300      	movs	r3, #0
 800295a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03f      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800296c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002970:	d01c      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d802      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800297c:	e01f      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800297e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002982:	d003      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002984:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002988:	d01c      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800298a:	e018      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800298c:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a84      	ldr	r2, [pc, #528]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002998:	e015      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fab9 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029aa:	e00c      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3320      	adds	r3, #32
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fba0 	bl	80030f8 <RCCEx_PLLSAI2_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029bc:	e003      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	74fb      	strb	r3, [r7, #19]
      break;
 80029c2:	e000      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80029c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029cc:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029da:	4972      	ldr	r1, [pc, #456]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029e2:	e001      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d03f      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d01c      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80029fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a02:	d802      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a08:	e01f      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0e:	d003      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a14:	d01c      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a16:	e018      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a18:	4b62      	ldr	r3, [pc, #392]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a61      	ldr	r2, [pc, #388]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a24:	e015      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fa73 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a36:	e00c      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3320      	adds	r3, #32
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fb5a 	bl	80030f8 <RCCEx_PLLSAI2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a48:	e003      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a4e:	e000      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a58:	4b52      	ldr	r3, [pc, #328]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a66:	494f      	ldr	r1, [pc, #316]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a6e:	e001      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a0 	beq.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa8:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fc3c 	bl	8001340 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aca:	e009      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe fc38 	bl	8001340 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ade:	e005      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d15c      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01f      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d019      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d016      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fbf7 	bl	8001340 <HAL_GetTick>
 8002b52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b54:	e00b      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fbf3 	bl	8001340 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d902      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b6c:	e006      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ec      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b92:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb0:	7c7b      	ldrb	r3, [r7, #17]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b9e      	ldr	r3, [pc, #632]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	4a9d      	ldr	r2, [pc, #628]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bce:	4b98      	ldr	r3, [pc, #608]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 0203 	bic.w	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	4994      	ldr	r1, [pc, #592]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 020c 	bic.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	498c      	ldr	r1, [pc, #560]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c12:	4b87      	ldr	r3, [pc, #540]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4983      	ldr	r1, [pc, #524]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c34:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	497b      	ldr	r1, [pc, #492]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	4972      	ldr	r1, [pc, #456]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c78:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	496a      	ldr	r1, [pc, #424]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	4961      	ldr	r1, [pc, #388]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cca:	4959      	ldr	r1, [pc, #356]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	4950      	ldr	r1, [pc, #320]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	4948      	ldr	r1, [pc, #288]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	493f      	ldr	r1, [pc, #252]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d028      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
 8002d70:	e011      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f8c8 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	491f      	ldr	r1, [pc, #124]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dcc:	60d3      	str	r3, [r2, #12]
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2101      	movs	r1, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f899 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e1e:	d109      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a02      	ldr	r2, [pc, #8]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2a:	60d3      	str	r3, [r2, #12]
 8002e2c:	e014      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f867 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02f      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e72:	4928      	ldr	r1, [pc, #160]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e82:	d10d      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f844 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d014      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	74bb      	strb	r3, [r7, #18]
 8002e9e:	e011      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3320      	adds	r3, #32
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f921 	bl	80030f8 <RCCEx_PLLSAI2_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ede:	490d      	ldr	r1, [pc, #52]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f26:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f32:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10d      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
       ||
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
       ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d044      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	e041      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d00c      	beq.n	8002f86 <RCCEx_PLLSAI1_Config+0x6e>
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d013      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x80>
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d120      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f74:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11d      	bne.n	8002fbc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e01a      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f96:	e013      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f98:	4b56      	ldr	r3, [pc, #344]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fb4:	e006      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fba:	e004      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fcc:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	4944      	ldr	r1, [pc, #272]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d17d      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fe f9a1 	bl	8001340 <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003000:	e009      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003002:	f7fe f99d 	bl	8001340 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d902      	bls.n	8003016 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	73fb      	strb	r3, [r7, #15]
        break;
 8003014:	e005      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ef      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d160      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d111      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6892      	ldr	r2, [r2, #8]
 800303e:	0211      	lsls	r1, r2, #8
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68d2      	ldr	r2, [r2, #12]
 8003044:	0912      	lsrs	r2, r2, #4
 8003046:	0452      	lsls	r2, r2, #17
 8003048:	430a      	orrs	r2, r1
 800304a:	492a      	ldr	r1, [pc, #168]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	610b      	str	r3, [r1, #16]
 8003050:	e027      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d112      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003058:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003060:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	0211      	lsls	r1, r2, #8
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6912      	ldr	r2, [r2, #16]
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0552      	lsls	r2, r2, #21
 8003074:	430a      	orrs	r2, r1
 8003076:	491f      	ldr	r1, [pc, #124]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	610b      	str	r3, [r1, #16]
 800307c:	e011      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003086:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	0211      	lsls	r1, r2, #8
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6952      	ldr	r2, [r2, #20]
 8003094:	0852      	lsrs	r2, r2, #1
 8003096:	3a01      	subs	r2, #1
 8003098:	0652      	lsls	r2, r2, #25
 800309a:	430a      	orrs	r2, r1
 800309c:	4915      	ldr	r1, [pc, #84]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe f947 	bl	8001340 <HAL_GetTick>
 80030b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b4:	e009      	b.n	80030ca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b6:	f7fe f943 	bl	8001340 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d902      	bls.n	80030ca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	73fb      	strb	r3, [r7, #15]
          break;
 80030c8:	e005      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ef      	beq.n	80030b6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4903      	ldr	r1, [pc, #12]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000

080030f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003106:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0203 	and.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d10d      	bne.n	800313e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
       ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800312a:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
       ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d044      	beq.n	80031c8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e041      	b.n	80031c8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d00c      	beq.n	8003166 <RCCEx_PLLSAI2_Config+0x6e>
 800314c:	2b03      	cmp	r3, #3
 800314e:	d013      	beq.n	8003178 <RCCEx_PLLSAI2_Config+0x80>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d120      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003154:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11d      	bne.n	800319c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003164:	e01a      	b.n	800319c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003166:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003176:	e013      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003194:	e006      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      break;
 800319a:	e004      	b.n	80031a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10d      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031ac:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	3b01      	subs	r3, #1
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	430b      	orrs	r3, r1
 80031c2:	4939      	ldr	r1, [pc, #228]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d167      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031da:	f7fe f8b1 	bl	8001340 <HAL_GetTick>
 80031de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031e0:	e009      	b.n	80031f6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031e2:	f7fe f8ad 	bl	8001340 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d902      	bls.n	80031f6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	73fb      	strb	r3, [r7, #15]
        break;
 80031f4:	e005      	b.n	8003202 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ef      	bne.n	80031e2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d14a      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d111      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	0211      	lsls	r1, r2, #8
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68d2      	ldr	r2, [r2, #12]
 8003224:	0912      	lsrs	r2, r2, #4
 8003226:	0452      	lsls	r2, r2, #17
 8003228:	430a      	orrs	r2, r1
 800322a:	491f      	ldr	r1, [pc, #124]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800322c:	4313      	orrs	r3, r2
 800322e:	614b      	str	r3, [r1, #20]
 8003230:	e011      	b.n	8003256 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800323a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6892      	ldr	r2, [r2, #8]
 8003242:	0211      	lsls	r1, r2, #8
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6912      	ldr	r2, [r2, #16]
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0652      	lsls	r2, r2, #25
 800324e:	430a      	orrs	r2, r1
 8003250:	4915      	ldr	r1, [pc, #84]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe f86d 	bl	8001340 <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003268:	e009      	b.n	800327e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800326a:	f7fe f869 	bl	8001340 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d902      	bls.n	800327e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	73fb      	strb	r3, [r7, #15]
          break;
 800327c:	e005      	b.n	800328a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ef      	beq.n	800326a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e049      	b.n	8003352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f841 	bl	800335a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 f9f8 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e04f      	b.n	8003428 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <HAL_TIM_Base_Start_IT+0xc4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x76>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d018      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x76>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_TIM_Base_Start_IT+0xc8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x76>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_TIM_Base_Start_IT+0xcc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x76>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x76>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_TIM_Base_Start_IT+0xd4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x76>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_TIM_Base_Start_IT+0xd8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d115      	bne.n	8003412 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_TIM_Base_Start_IT+0xdc>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d015      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0xb4>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d011      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	e008      	b.n	8003424 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e000      	b.n	8003426 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40013400 	.word	0x40013400
 8003448:	40014000 	.word	0x40014000
 800344c:	00010007 	.word	0x00010007

08003450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0202 	mvn.w	r2, #2
 800347c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f905 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8f7 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f908 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0204 	mvn.w	r2, #4
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8db 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8cd 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f8de 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0208 	mvn.w	r2, #8
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2204      	movs	r2, #4
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8b1 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8a3 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8b4 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b10      	cmp	r3, #16
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b10      	cmp	r3, #16
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0210 	mvn.w	r2, #16
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2208      	movs	r2, #8
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f887 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f879 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f88a 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0201 	mvn.w	r2, #1
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fc ff8c 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f914 	bl	8003828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d10e      	bne.n	800362e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d107      	bne.n	800362e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f907 	bl	800383c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d10e      	bne.n	800365a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d107      	bne.n	800365a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f838 	bl	80036ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b20      	cmp	r3, #32
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0220 	mvn.w	r2, #32
 800367e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8c7 	bl	8003814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3c      	ldr	r2, [pc, #240]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01f      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d01b      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d017      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00f      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <TIM_Base_SetConfig+0x128>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <TIM_Base_SetConfig+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <TIM_Base_SetConfig+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <TIM_Base_SetConfig+0x124>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <TIM_Base_SetConfig+0x128>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <TIM_Base_SetConfig+0x12c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <TIM_Base_SetConfig+0x130>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800

08003814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800385e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003862:	2b84      	cmp	r3, #132	; 0x84
 8003864:	d005      	beq.n	8003872 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003866:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	3303      	adds	r3, #3
 8003870:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003872:	68fb      	ldr	r3, [r7, #12]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003884:	f000 fada 	bl	8003e3c <vTaskStartScheduler>
  
  return osOK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	bd80      	pop	{r7, pc}

0800388e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800388e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003890:	b089      	sub	sp, #36	; 0x24
 8003892:	af04      	add	r7, sp, #16
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <osThreadCreate+0x54>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01c      	beq.n	80038e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685c      	ldr	r4, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681d      	ldr	r5, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691e      	ldr	r6, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ffc8 	bl	8003850 <makeFreeRtosPriority>
 80038c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ca:	9202      	str	r2, [sp, #8]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	9100      	str	r1, [sp, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4632      	mov	r2, r6
 80038d4:	4629      	mov	r1, r5
 80038d6:	4620      	mov	r0, r4
 80038d8:	f000 f8ed 	bl	8003ab6 <xTaskCreateStatic>
 80038dc:	4603      	mov	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e01c      	b.n	800391c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685c      	ldr	r4, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ee:	b29e      	uxth	r6, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ffaa 	bl	8003850 <makeFreeRtosPriority>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f107 030c 	add.w	r3, r7, #12
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	4632      	mov	r2, r6
 800390a:	4629      	mov	r1, r5
 800390c:	4620      	mov	r0, r4
 800390e:	f000 f92c 	bl	8003b6a <xTaskCreate>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003926 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <osDelay+0x16>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	e000      	b.n	800393e <osDelay+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa48 	bl	8003dd4 <vTaskDelay>
  
  return osOK;
 8003944:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f103 0208 	add.w	r2, r3, #8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f04f 32ff 	mov.w	r2, #4294967295
 8003966:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f103 0208 	add.w	r2, r3, #8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f103 0208 	add.w	r2, r3, #8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d103      	bne.n	8003a10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e00c      	b.n	8003a2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3308      	adds	r3, #8
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e002      	b.n	8003a1e <vListInsert+0x2e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d2f6      	bcs.n	8003a18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6852      	ldr	r2, [r2, #4]
 8003a82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d103      	bne.n	8003a96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b08e      	sub	sp, #56	; 0x38
 8003aba:	af04      	add	r7, sp, #16
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	e7fe      	b.n	8003adc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <xTaskCreateStatic+0x42>
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e7fe      	b.n	8003af6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003af8:	2354      	movs	r3, #84	; 0x54
 8003afa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b54      	cmp	r3, #84	; 0x54
 8003b00:	d009      	beq.n	8003b16 <xTaskCreateStatic+0x60>
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	e7fe      	b.n	8003b14 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01e      	beq.n	8003b5c <xTaskCreateStatic+0xa6>
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b36:	2300      	movs	r3, #0
 8003b38:	9303      	str	r3, [sp, #12]
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	9302      	str	r3, [sp, #8]
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f850 	bl	8003bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b56:	f000 f8d3 	bl	8003d00 <prvAddNewTaskToReadyList>
 8003b5a:	e001      	b.n	8003b60 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b60:	697b      	ldr	r3, [r7, #20]
	}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3728      	adds	r7, #40	; 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b08c      	sub	sp, #48	; 0x30
 8003b6e:	af04      	add	r7, sp, #16
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 feb0 	bl	80048e4 <pvPortMalloc>
 8003b84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b8c:	2054      	movs	r0, #84	; 0x54
 8003b8e:	f000 fea9 	bl	80048e4 <pvPortMalloc>
 8003b92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba0:	e005      	b.n	8003bae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f000 ff60 	bl	8004a68 <vPortFree>
 8003ba8:	e001      	b.n	8003bae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d017      	beq.n	8003be4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9303      	str	r3, [sp, #12]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	9302      	str	r3, [sp, #8]
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f80e 	bl	8003bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bd8:	69f8      	ldr	r0, [r7, #28]
 8003bda:	f000 f891 	bl	8003d00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bde:	2301      	movs	r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	e002      	b.n	8003bea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bea:	69bb      	ldr	r3, [r7, #24]
	}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <prvInitialiseNewTask+0x46>
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e7fe      	b.n	8003c38 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01f      	beq.n	8003c80 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	e012      	b.n	8003c6c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	7819      	ldrb	r1, [r3, #0]
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	3334      	adds	r3, #52	; 0x34
 8003c56:	460a      	mov	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d9e9      	bls.n	8003c46 <prvInitialiseNewTask+0x52>
 8003c72:	e000      	b.n	8003c76 <prvInitialiseNewTask+0x82>
			{
				break;
 8003c74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c7e:	e003      	b.n	8003c88 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d901      	bls.n	8003c92 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c8e:	2306      	movs	r3, #6
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fe70 	bl	800398e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fe6b 	bl	800398e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	f1c3 0207 	rsb	r2, r3, #7
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	69b8      	ldr	r0, [r7, #24]
 8003ce2:	f000 fbfd 	bl	80044e0 <pxPortInitialiseStack>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d08:	f000 fd10 	bl	800472c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <prvAddNewTaskToReadyList+0xb8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <prvAddNewTaskToReadyList+0xb8>)
 8003d14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <prvAddNewTaskToReadyList+0xbc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d1e:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <prvAddNewTaskToReadyList+0xbc>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <prvAddNewTaskToReadyList+0xb8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d110      	bne.n	8003d4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d2c:	f000 fab8 	bl	80042a0 <prvInitialiseTaskLists>
 8003d30:	e00d      	b.n	8003d4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d32:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <prvAddNewTaskToReadyList+0xc0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <prvAddNewTaskToReadyList+0xbc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d802      	bhi.n	8003d4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <prvAddNewTaskToReadyList+0xbc>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <prvAddNewTaskToReadyList+0xc4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <prvAddNewTaskToReadyList+0xc4>)
 8003d56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <prvAddNewTaskToReadyList+0xc8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <prvAddNewTaskToReadyList+0xc8>)
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <prvAddNewTaskToReadyList+0xcc>)
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f7ff fe11 	bl	80039a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d86:	f000 fcff 	bl	8004788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <prvAddNewTaskToReadyList+0xc0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvAddNewTaskToReadyList+0xbc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d207      	bcs.n	8003db0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <prvAddNewTaskToReadyList+0xd0>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000380 	.word	0x20000380
 8003dbc:	20000280 	.word	0x20000280
 8003dc0:	2000038c 	.word	0x2000038c
 8003dc4:	2000039c 	.word	0x2000039c
 8003dc8:	20000388 	.word	0x20000388
 8003dcc:	20000284 	.word	0x20000284
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <vTaskDelay+0x60>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <vTaskDelay+0x2e>
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	e7fe      	b.n	8003e00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e02:	f000 f879 	bl	8003ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e06:	2100      	movs	r1, #0
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fb03 	bl	8004414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e0e:	f000 f881 	bl	8003f14 <xTaskResumeAll>
 8003e12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <vTaskDelay+0x64>)
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200003a8 	.word	0x200003a8
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e4a:	463a      	mov	r2, r7
 8003e4c:	1d39      	adds	r1, r7, #4
 8003e4e:	f107 0308 	add.w	r3, r7, #8
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc f9bc 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	9202      	str	r2, [sp, #8]
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	2300      	movs	r3, #0
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	460a      	mov	r2, r1
 8003e6a:	491d      	ldr	r1, [pc, #116]	; (8003ee0 <vTaskStartScheduler+0xa4>)
 8003e6c:	481d      	ldr	r0, [pc, #116]	; (8003ee4 <vTaskStartScheduler+0xa8>)
 8003e6e:	f7ff fe22 	bl	8003ab6 <xTaskCreateStatic>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <vTaskStartScheduler+0xac>)
 8003e76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <vTaskStartScheduler+0xac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e80:	2301      	movs	r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e001      	b.n	8003e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d115      	bne.n	8003ebc <vTaskStartScheduler+0x80>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <vTaskStartScheduler+0xb0>)
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <vTaskStartScheduler+0xb4>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <vTaskStartScheduler+0xb8>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003eb6:	f000 fb9b 	bl	80045f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003eba:	e00d      	b.n	8003ed8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d109      	bne.n	8003ed8 <vTaskStartScheduler+0x9c>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e7fe      	b.n	8003ed6 <vTaskStartScheduler+0x9a>
}
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	08004d54 	.word	0x08004d54
 8003ee4:	08004271 	.word	0x08004271
 8003ee8:	200003a4 	.word	0x200003a4
 8003eec:	200003a0 	.word	0x200003a0
 8003ef0:	2000038c 	.word	0x2000038c
 8003ef4:	20000384 	.word	0x20000384

08003ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <vTaskSuspendAll+0x18>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <vTaskSuspendAll+0x18>)
 8003f04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	200003a8 	.word	0x200003a8

08003f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f22:	4b41      	ldr	r3, [pc, #260]	; (8004028 <xTaskResumeAll+0x114>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <xTaskResumeAll+0x2a>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	e7fe      	b.n	8003f3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f3e:	f000 fbf5 	bl	800472c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f42:	4b39      	ldr	r3, [pc, #228]	; (8004028 <xTaskResumeAll+0x114>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	4a37      	ldr	r2, [pc, #220]	; (8004028 <xTaskResumeAll+0x114>)
 8003f4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <xTaskResumeAll+0x114>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d161      	bne.n	8004018 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <xTaskResumeAll+0x118>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05d      	beq.n	8004018 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f5c:	e02e      	b.n	8003fbc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f5e:	4b34      	ldr	r3, [pc, #208]	; (8004030 <xTaskResumeAll+0x11c>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fd79 	bl	8003a62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fd74 	bl	8003a62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <xTaskResumeAll+0x120>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	4a2a      	ldr	r2, [pc, #168]	; (8004034 <xTaskResumeAll+0x120>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <xTaskResumeAll+0x124>)
 8003f9a:	441a      	add	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7ff fd00 	bl	80039a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4b23      	ldr	r3, [pc, #140]	; (800403c <xTaskResumeAll+0x128>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <xTaskResumeAll+0x12c>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <xTaskResumeAll+0x11c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1cc      	bne.n	8003f5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fca:	f000 fa03 	bl	80043d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <xTaskResumeAll+0x130>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fda:	f000 f837 	bl	800404c <xTaskIncrementTick>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003fe4:	4b16      	ldr	r3, [pc, #88]	; (8004040 <xTaskResumeAll+0x12c>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f1      	bne.n	8003fda <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <xTaskResumeAll+0x130>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <xTaskResumeAll+0x12c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <xTaskResumeAll+0x134>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004018:	f000 fbb6 	bl	8004788 <vPortExitCritical>

	return xAlreadyYielded;
 800401c:	68bb      	ldr	r3, [r7, #8]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	200003a8 	.word	0x200003a8
 800402c:	20000380 	.word	0x20000380
 8004030:	20000340 	.word	0x20000340
 8004034:	20000388 	.word	0x20000388
 8004038:	20000284 	.word	0x20000284
 800403c:	20000280 	.word	0x20000280
 8004040:	20000394 	.word	0x20000394
 8004044:	20000390 	.word	0x20000390
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004056:	4b4e      	ldr	r3, [pc, #312]	; (8004190 <xTaskIncrementTick+0x144>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 8087 	bne.w	800416e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004060:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <xTaskIncrementTick+0x148>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004068:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <xTaskIncrementTick+0x148>)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11f      	bne.n	80040b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004074:	4b48      	ldr	r3, [pc, #288]	; (8004198 <xTaskIncrementTick+0x14c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <xTaskIncrementTick+0x46>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	e7fe      	b.n	8004090 <xTaskIncrementTick+0x44>
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <xTaskIncrementTick+0x14c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <xTaskIncrementTick+0x150>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3e      	ldr	r2, [pc, #248]	; (8004198 <xTaskIncrementTick+0x14c>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4a3e      	ldr	r2, [pc, #248]	; (800419c <xTaskIncrementTick+0x150>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <xTaskIncrementTick+0x154>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a3c      	ldr	r2, [pc, #240]	; (80041a0 <xTaskIncrementTick+0x154>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	f000 f990 	bl	80043d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <xTaskIncrementTick+0x158>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d348      	bcc.n	8004150 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <xTaskIncrementTick+0x14c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <xTaskIncrementTick+0x158>)
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	601a      	str	r2, [r3, #0]
					break;
 80040d0:	e03e      	b.n	8004150 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <xTaskIncrementTick+0x14c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d203      	bcs.n	80040f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040ea:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <xTaskIncrementTick+0x158>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040f0:	e02e      	b.n	8004150 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fcb3 	bl	8003a62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3318      	adds	r3, #24
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fcaa 	bl	8003a62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	2201      	movs	r2, #1
 8004114:	409a      	lsls	r2, r3
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <xTaskIncrementTick+0x15c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <xTaskIncrementTick+0x15c>)
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <xTaskIncrementTick+0x160>)
 800412e:	441a      	add	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7ff fc36 	bl	80039a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <xTaskIncrementTick+0x164>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	429a      	cmp	r2, r3
 8004148:	d3b9      	bcc.n	80040be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414e:	e7b6      	b.n	80040be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <xTaskIncrementTick+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	4915      	ldr	r1, [pc, #84]	; (80041ac <xTaskIncrementTick+0x160>)
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d907      	bls.n	8004178 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e004      	b.n	8004178 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <xTaskIncrementTick+0x168>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a0f      	ldr	r2, [pc, #60]	; (80041b4 <xTaskIncrementTick+0x168>)
 8004176:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <xTaskIncrementTick+0x16c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004184:	697b      	ldr	r3, [r7, #20]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200003a8 	.word	0x200003a8
 8004194:	20000384 	.word	0x20000384
 8004198:	20000338 	.word	0x20000338
 800419c:	2000033c 	.word	0x2000033c
 80041a0:	20000398 	.word	0x20000398
 80041a4:	200003a0 	.word	0x200003a0
 80041a8:	20000388 	.word	0x20000388
 80041ac:	20000284 	.word	0x20000284
 80041b0:	20000280 	.word	0x20000280
 80041b4:	20000390 	.word	0x20000390
 80041b8:	20000394 	.word	0x20000394

080041bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <vTaskSwitchContext+0xa0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <vTaskSwitchContext+0xa4>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041d0:	e03e      	b.n	8004250 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <vTaskSwitchContext+0xa4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b22      	ldr	r3, [pc, #136]	; (8004264 <vTaskSwitchContext+0xa8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	f1c3 031f 	rsb	r3, r3, #31
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	491e      	ldr	r1, [pc, #120]	; (8004268 <vTaskSwitchContext+0xac>)
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	e7fe      	b.n	8004214 <vTaskSwitchContext+0x58>
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <vTaskSwitchContext+0xac>)
 8004222:	4413      	add	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3308      	adds	r3, #8
 8004238:	429a      	cmp	r2, r3
 800423a:	d104      	bne.n	8004246 <vTaskSwitchContext+0x8a>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <vTaskSwitchContext+0xb0>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	200003a8 	.word	0x200003a8
 8004260:	20000394 	.word	0x20000394
 8004264:	20000388 	.word	0x20000388
 8004268:	20000284 	.word	0x20000284
 800426c:	20000280 	.word	0x20000280

08004270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004278:	f000 f852 	bl	8004320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <prvIdleTask+0x28>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d9f9      	bls.n	8004278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <prvIdleTask+0x2c>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004294:	e7f0      	b.n	8004278 <prvIdleTask+0x8>
 8004296:	bf00      	nop
 8004298:	20000284 	.word	0x20000284
 800429c:	e000ed04 	.word	0xe000ed04

080042a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	e00c      	b.n	80042c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <prvInitialiseTaskLists+0x60>)
 80042b8:	4413      	add	r3, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fb47 	bl	800394e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3301      	adds	r3, #1
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d9ef      	bls.n	80042ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <prvInitialiseTaskLists+0x64>)
 80042ce:	f7ff fb3e 	bl	800394e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042d2:	480d      	ldr	r0, [pc, #52]	; (8004308 <prvInitialiseTaskLists+0x68>)
 80042d4:	f7ff fb3b 	bl	800394e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042d8:	480c      	ldr	r0, [pc, #48]	; (800430c <prvInitialiseTaskLists+0x6c>)
 80042da:	f7ff fb38 	bl	800394e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042de:	480c      	ldr	r0, [pc, #48]	; (8004310 <prvInitialiseTaskLists+0x70>)
 80042e0:	f7ff fb35 	bl	800394e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042e4:	480b      	ldr	r0, [pc, #44]	; (8004314 <prvInitialiseTaskLists+0x74>)
 80042e6:	f7ff fb32 	bl	800394e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <prvInitialiseTaskLists+0x78>)
 80042ec:	4a05      	ldr	r2, [pc, #20]	; (8004304 <prvInitialiseTaskLists+0x64>)
 80042ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <prvInitialiseTaskLists+0x7c>)
 80042f2:	4a05      	ldr	r2, [pc, #20]	; (8004308 <prvInitialiseTaskLists+0x68>)
 80042f4:	601a      	str	r2, [r3, #0]
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000284 	.word	0x20000284
 8004304:	20000310 	.word	0x20000310
 8004308:	20000324 	.word	0x20000324
 800430c:	20000340 	.word	0x20000340
 8004310:	20000354 	.word	0x20000354
 8004314:	2000036c 	.word	0x2000036c
 8004318:	20000338 	.word	0x20000338
 800431c:	2000033c 	.word	0x2000033c

08004320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004326:	e019      	b.n	800435c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004328:	f000 fa00 	bl	800472c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <prvCheckTasksWaitingTermination+0x4c>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fb92 	bl	8003a62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <prvCheckTasksWaitingTermination+0x50>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <prvCheckTasksWaitingTermination+0x50>)
 8004346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <prvCheckTasksWaitingTermination+0x54>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <prvCheckTasksWaitingTermination+0x54>)
 8004350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004352:	f000 fa19 	bl	8004788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f80e 	bl	8004378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <prvCheckTasksWaitingTermination+0x54>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e1      	bne.n	8004328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000354 	.word	0x20000354
 8004370:	20000380 	.word	0x20000380
 8004374:	20000368 	.word	0x20000368

08004378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb6a 	bl	8004a68 <vPortFree>
				vPortFree( pxTCB );
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb67 	bl	8004a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800439a:	e017      	b.n	80043cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d103      	bne.n	80043ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fb5e 	bl	8004a68 <vPortFree>
	}
 80043ac:	e00e      	b.n	80043cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d009      	beq.n	80043cc <prvDeleteTCB+0x54>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e7fe      	b.n	80043ca <prvDeleteTCB+0x52>
	}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <prvResetNextTaskUnblockTime+0x38>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <prvResetNextTaskUnblockTime+0x3c>)
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043ec:	e008      	b.n	8004400 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <prvResetNextTaskUnblockTime+0x38>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <prvResetNextTaskUnblockTime+0x3c>)
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20000338 	.word	0x20000338
 8004410:	200003a0 	.word	0x200003a0

08004414 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fb19 	bl	8003a62 <uxListRemove>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	2201      	movs	r2, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43da      	mvns	r2, r3
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4013      	ands	r3, r2
 800444a:	4a20      	ldr	r2, [pc, #128]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800444c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d10a      	bne.n	800446c <prvAddCurrentTaskToDelayedList+0x58>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445c:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	481a      	ldr	r0, [pc, #104]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004466:	f7ff fa9f 	bl	80039a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800446a:	e026      	b.n	80044ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d209      	bcs.n	8004498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7ff faad 	bl	80039f0 <vListInsert>
}
 8004496:	e010      	b.n	80044ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7ff faa3 	bl	80039f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d202      	bcs.n	80044ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044b4:	4a09      	ldr	r2, [pc, #36]	; (80044dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6013      	str	r3, [r2, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000384 	.word	0x20000384
 80044c8:	20000280 	.word	0x20000280
 80044cc:	20000388 	.word	0x20000388
 80044d0:	2000036c 	.word	0x2000036c
 80044d4:	2000033c 	.word	0x2000033c
 80044d8:	20000338 	.word	0x20000338
 80044dc:	200003a0 	.word	0x200003a0

080044e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b04      	subs	r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b04      	subs	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3b04      	subs	r3, #4
 800450e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004510:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <pxPortInitialiseStack+0x64>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3b14      	subs	r3, #20
 800451a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3b04      	subs	r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f06f 0202 	mvn.w	r2, #2
 800452e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b20      	subs	r3, #32
 8004534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	08004549 	.word	0x08004549

08004548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <prvTaskExitError+0x50>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d009      	beq.n	8004570 <prvTaskExitError+0x28>
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e7fe      	b.n	800456e <prvTaskExitError+0x26>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004582:	bf00      	nop
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0fc      	beq.n	8004584 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	2000000c 	.word	0x2000000c
 800459c:	00000000 	.word	0x00000000

080045a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <pxCurrentTCBConst2>)
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	6808      	ldr	r0, [r1, #0]
 80045a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045aa:	f380 8809 	msr	PSP, r0
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f380 8811 	msr	BASEPRI, r0
 80045ba:	4770      	bx	lr
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst2>:
 80045c0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045c8:	4808      	ldr	r0, [pc, #32]	; (80045ec <prvPortStartFirstTask+0x24>)
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	6800      	ldr	r0, [r0, #0]
 80045ce:	f380 8808 	msr	MSP, r0
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8814 	msr	CONTROL, r0
 80045da:	b662      	cpsie	i
 80045dc:	b661      	cpsie	f
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	df00      	svc	0
 80045e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ea:	bf00      	nop
 80045ec:	e000ed08 	.word	0xe000ed08

080045f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <xPortStartScheduler+0x118>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a44      	ldr	r2, [pc, #272]	; (800470c <xPortStartScheduler+0x11c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <xPortStartScheduler+0x24>
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e7fe      	b.n	8004612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004614:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <xPortStartScheduler+0x118>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3d      	ldr	r2, [pc, #244]	; (8004710 <xPortStartScheduler+0x120>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d109      	bne.n	8004632 <xPortStartScheduler+0x42>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e7fe      	b.n	8004630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004632:	4b38      	ldr	r3, [pc, #224]	; (8004714 <xPortStartScheduler+0x124>)
 8004634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	22ff      	movs	r2, #255	; 0xff
 8004642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <xPortStartScheduler+0x128>)
 8004658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <xPortStartScheduler+0x12c>)
 800465c:	2207      	movs	r2, #7
 800465e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004660:	e009      	b.n	8004676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <xPortStartScheduler+0x12c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3b01      	subs	r3, #1
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <xPortStartScheduler+0x12c>)
 800466a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d0ef      	beq.n	8004662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004682:	4b26      	ldr	r3, [pc, #152]	; (800471c <xPortStartScheduler+0x12c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f1c3 0307 	rsb	r3, r3, #7
 800468a:	2b04      	cmp	r3, #4
 800468c:	d009      	beq.n	80046a2 <xPortStartScheduler+0xb2>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	e7fe      	b.n	80046a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046a2:	4b1e      	ldr	r3, [pc, #120]	; (800471c <xPortStartScheduler+0x12c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	4a1c      	ldr	r2, [pc, #112]	; (800471c <xPortStartScheduler+0x12c>)
 80046aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <xPortStartScheduler+0x12c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <xPortStartScheduler+0x12c>)
 80046b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <xPortStartScheduler+0x130>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <xPortStartScheduler+0x130>)
 80046c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <xPortStartScheduler+0x130>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <xPortStartScheduler+0x130>)
 80046d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046d8:	f000 f8d6 	bl	8004888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <xPortStartScheduler+0x134>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046e2:	f000 f8f5 	bl	80048d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <xPortStartScheduler+0x138>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <xPortStartScheduler+0x138>)
 80046ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046f2:	f7ff ff69 	bl	80045c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046f6:	f7ff fd61 	bl	80041bc <vTaskSwitchContext>
	prvTaskExitError();
 80046fa:	f7ff ff25 	bl	8004548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	e000ed00 	.word	0xe000ed00
 800470c:	410fc271 	.word	0x410fc271
 8004710:	410fc270 	.word	0x410fc270
 8004714:	e000e400 	.word	0xe000e400
 8004718:	200003ac 	.word	0x200003ac
 800471c:	200003b0 	.word	0x200003b0
 8004720:	e000ed20 	.word	0xe000ed20
 8004724:	2000000c 	.word	0x2000000c
 8004728:	e000ef34 	.word	0xe000ef34

0800472c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <vPortEnterCritical+0x54>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <vPortEnterCritical+0x54>)
 800474c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <vPortEnterCritical+0x54>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10e      	bne.n	8004774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <vPortEnterCritical+0x58>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <vPortEnterCritical+0x48>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	e7fe      	b.n	8004772 <vPortEnterCritical+0x46>
	}
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	2000000c 	.word	0x2000000c
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <vPortExitCritical+0x4c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <vPortExitCritical+0x22>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	e7fe      	b.n	80047a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <vPortExitCritical+0x4c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <vPortExitCritical+0x4c>)
 80047b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047b4:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <vPortExitCritical+0x4c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <vPortExitCritical+0x3e>
 80047bc:	2300      	movs	r3, #0
 80047be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c
	...

080047e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047e0:	f3ef 8009 	mrs	r0, PSP
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <pxCurrentTCBConst>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f01e 0f10 	tst.w	lr, #16
 80047f0:	bf08      	it	eq
 80047f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fa:	6010      	str	r0, [r2, #0]
 80047fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004804:	f380 8811 	msr	BASEPRI, r0
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f7ff fcd4 	bl	80041bc <vTaskSwitchContext>
 8004814:	f04f 0000 	mov.w	r0, #0
 8004818:	f380 8811 	msr	BASEPRI, r0
 800481c:	bc09      	pop	{r0, r3}
 800481e:	6819      	ldr	r1, [r3, #0]
 8004820:	6808      	ldr	r0, [r1, #0]
 8004822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004826:	f01e 0f10 	tst.w	lr, #16
 800482a:	bf08      	it	eq
 800482c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004830:	f380 8809 	msr	PSP, r0
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	f3af 8000 	nop.w

08004840 <pxCurrentTCBConst>:
 8004840:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop

08004848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004860:	f7ff fbf4 	bl	800404c <xTaskIncrementTick>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <SysTick_Handler+0x3c>)
 800486c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	2300      	movs	r3, #0
 8004874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <vPortSetupTimerInterrupt+0x34>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <vPortSetupTimerInterrupt+0x38>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <vPortSetupTimerInterrupt+0x3c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <vPortSetupTimerInterrupt+0x40>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	4a09      	ldr	r2, [pc, #36]	; (80048cc <vPortSetupTimerInterrupt+0x44>)
 80048a6:	3b01      	subs	r3, #1
 80048a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <vPortSetupTimerInterrupt+0x34>)
 80048ac:	2207      	movs	r2, #7
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	e000e010 	.word	0xe000e010
 80048c0:	e000e018 	.word	0xe000e018
 80048c4:	20000000 	.word	0x20000000
 80048c8:	10624dd3 	.word	0x10624dd3
 80048cc:	e000e014 	.word	0xe000e014

080048d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048e0 <vPortEnableVFP+0x10>
 80048d4:	6801      	ldr	r1, [r0, #0]
 80048d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048da:	6001      	str	r1, [r0, #0]
 80048dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048de:	bf00      	nop
 80048e0:	e000ed88 	.word	0xe000ed88

080048e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048f0:	f7ff fb02 	bl	8003ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048f4:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <pvPortMalloc+0x170>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048fc:	f000 f90c 	bl	8004b18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004900:	4b55      	ldr	r3, [pc, #340]	; (8004a58 <pvPortMalloc+0x174>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 808c 	bne.w	8004a26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01c      	beq.n	800494e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004914:	2208      	movs	r2, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	3308      	adds	r3, #8
 800492e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <pvPortMalloc+0x6a>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e7fe      	b.n	800494c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d068      	beq.n	8004a26 <pvPortMalloc+0x142>
 8004954:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <pvPortMalloc+0x178>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d863      	bhi.n	8004a26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800495e:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <pvPortMalloc+0x17c>)
 8004960:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <pvPortMalloc+0x17c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004968:	e004      	b.n	8004974 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d903      	bls.n	8004986 <pvPortMalloc+0xa2>
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f1      	bne.n	800496a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004986:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <pvPortMalloc+0x170>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498c:	429a      	cmp	r2, r3
 800498e:	d04a      	beq.n	8004a26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2208      	movs	r2, #8
 8004996:	4413      	add	r3, r2
 8004998:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	2308      	movs	r3, #8
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d91e      	bls.n	80049f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4413      	add	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <pvPortMalloc+0xf4>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e7fe      	b.n	80049d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ea:	69b8      	ldr	r0, [r7, #24]
 80049ec:	f000 f8f6 	bl	8004bdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <pvPortMalloc+0x178>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <pvPortMalloc+0x178>)
 80049fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049fe:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <pvPortMalloc+0x178>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <pvPortMalloc+0x180>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d203      	bcs.n	8004a12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <pvPortMalloc+0x178>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <pvPortMalloc+0x180>)
 8004a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <pvPortMalloc+0x174>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a26:	f7ff fa75 	bl	8003f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <pvPortMalloc+0x164>
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e7fe      	b.n	8004a46 <pvPortMalloc+0x162>
	return pvReturn;
 8004a48:	69fb      	ldr	r3, [r7, #28]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3728      	adds	r7, #40	; 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000f74 	.word	0x20000f74
 8004a58:	20000f80 	.word	0x20000f80
 8004a5c:	20000f78 	.word	0x20000f78
 8004a60:	20000f6c 	.word	0x20000f6c
 8004a64:	20000f7c 	.word	0x20000f7c

08004a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d046      	beq.n	8004b08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	425b      	negs	r3, r3
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <vPortFree+0xa8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <vPortFree+0x42>
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e7fe      	b.n	8004aa8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <vPortFree+0x5e>
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	e7fe      	b.n	8004ac4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <vPortFree+0xa8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d115      	bne.n	8004b08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <vPortFree+0xa8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004aec:	f7ff fa04 	bl	8003ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <vPortFree+0xac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4413      	add	r3, r2
 8004afa:	4a06      	ldr	r2, [pc, #24]	; (8004b14 <vPortFree+0xac>)
 8004afc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004afe:	6938      	ldr	r0, [r7, #16]
 8004b00:	f000 f86c 	bl	8004bdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b04:	f7ff fa06 	bl	8003f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b08:	bf00      	nop
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000f80 	.word	0x20000f80
 8004b14:	20000f78 	.word	0x20000f78

08004b18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <prvHeapInit+0xac>)
 8004b26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00c      	beq.n	8004b4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3307      	adds	r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <prvHeapInit+0xac>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <prvHeapInit+0xb0>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <prvHeapInit+0xb0>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b64:	2208      	movs	r2, #8
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <prvHeapInit+0xb4>)
 8004b78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <prvHeapInit+0xb4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <prvHeapInit+0xb4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	1ad2      	subs	r2, r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <prvHeapInit+0xb4>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <prvHeapInit+0xb8>)
 8004ba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <prvHeapInit+0xbc>)
 8004bae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <prvHeapInit+0xc0>)
 8004bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bb6:	601a      	str	r2, [r3, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	200003b4 	.word	0x200003b4
 8004bc8:	20000f6c 	.word	0x20000f6c
 8004bcc:	20000f74 	.word	0x20000f74
 8004bd0:	20000f7c 	.word	0x20000f7c
 8004bd4:	20000f78 	.word	0x20000f78
 8004bd8:	20000f80 	.word	0x20000f80

08004bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004be4:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <prvInsertBlockIntoFreeList+0xac>)
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e002      	b.n	8004bf0 <prvInsertBlockIntoFreeList+0x14>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d8f7      	bhi.n	8004bea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	4413      	add	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d108      	bne.n	8004c1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	441a      	add	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d118      	bne.n	8004c64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <prvInsertBlockIntoFreeList+0xb0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d00d      	beq.n	8004c5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e008      	b.n	8004c6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <prvInsertBlockIntoFreeList+0xb0>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e003      	b.n	8004c6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d002      	beq.n	8004c7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000f6c 	.word	0x20000f6c
 8004c8c:	20000f74 	.word	0x20000f74

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4e0d      	ldr	r6, [pc, #52]	; (8004cc8 <__libc_init_array+0x38>)
 8004c94:	4c0d      	ldr	r4, [pc, #52]	; (8004ccc <__libc_init_array+0x3c>)
 8004c96:	1ba4      	subs	r4, r4, r6
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	42a5      	cmp	r5, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	4e0b      	ldr	r6, [pc, #44]	; (8004cd0 <__libc_init_array+0x40>)
 8004ca2:	4c0c      	ldr	r4, [pc, #48]	; (8004cd4 <__libc_init_array+0x44>)
 8004ca4:	f000 f820 	bl	8004ce8 <_init>
 8004ca8:	1ba4      	subs	r4, r4, r6
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	2500      	movs	r5, #0
 8004cae:	42a5      	cmp	r5, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cb8:	4798      	blx	r3
 8004cba:	3501      	adds	r5, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cc2:	4798      	blx	r3
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	08004dec 	.word	0x08004dec
 8004ccc:	08004dec 	.word	0x08004dec
 8004cd0:	08004dec 	.word	0x08004dec
 8004cd4:	08004df0 	.word	0x08004df0

08004cd8 <memset>:
 8004cd8:	4402      	add	r2, r0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <memset+0xa>
 8004ce0:	4770      	bx	lr
 8004ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce6:	e7f9      	b.n	8004cdc <memset+0x4>

08004ce8 <_init>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr

08004cf4 <_fini>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr
